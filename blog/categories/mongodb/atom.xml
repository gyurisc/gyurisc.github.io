<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | littlebigtomatoes]]></title>
  <link href="http://www.littlebigtomatoes.com/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://www.littlebigtomatoes.com/"/>
  <updated>2018-09-14T10:06:41+02:00</updated>
  <id>http://www.littlebigtomatoes.com/</id>
  <author>
    <name><![CDATA[Krisztian Gyuris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scraping Stackoverflow Careers for Fun and Profit - Part 2]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/08/scraping-stackoverflow-careers-for-fun-and-profit-part-2/"/>
    <updated>2016-08-06T21:20:17+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/08/scraping-stackoverflow-careers-for-fun-and-profit-part-2</id>
    <content type="html"><![CDATA[<p>Let’s continue with our project. To summarise what we did in the <a href="http://littlebigtomatoes.com/2016/07/scraping-stackoverflow-careers-for-fun-and-profit/">first part</a>, we wrote a scraper in python using the <a href="http://scrapy.org">scrapy framework</a> that was capable of getting data from the stackoverflow job pages, but nothing else than that.</p>

<p>In this part, we will save the results to mongodb, make sure that we do not have duplicates and learn how to export the data we gathered&hellip;</p>

<!--more-->


<p></p>

<p>The source code for this project can be found in <a href="https://github.com/gyurisc/stackjobs">stackjobs repo</a> on github.</p>

<h3>Installing mongodb</h3>

<p>I need to store the data somewhere and I choose to use mongodb, because of no particular reason :). Let&rsquo;s install it via the <a href="http://brew.sh/">homebrew</a> package manager by using the commands:</p>

<pre><code class="bash">brew update
brew install mongodb
</code></pre>

<p>If you want to download the install package or use some other methods to install, please visit the page <a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-os-x/">Install MongoDB Community Edition on OS X</a> and choose the method that suits you.</p>

<p>Then create the directory structure for mongodb in a suitable location and start the server</p>

<pre><code class="bash ">mkdir mongodb/data/db
mongod --rest --dbpath mongodb/ 
</code></pre>

<p>You can confirm that the mongodb service is up and running by visiting <a href="http://localhost:28017">http://localhost:28017</a>.</p>

<h4>How to configure mongo to run as a service?</h4>

<p>Because, I installed mongodb using brew I can also start, stop and list mongodb as a service on macOS with the following command:</p>

<pre><code class="bash Starting and stopping mongodb servce using brew.">brew services start mongodb
brew services stop mongodb
brew services list
</code></pre>

<p>My only problem is with this approach is that I do not know how can I enable the &ndash;rest interface in this case, but navigating to <a href="http://localhost:27017">http://localhost:27017</a> I get the standard mongodb warning, meaning that my database engine is running and that is good enough for now.</p>

<p>In order, to communicate with mongodb in python, you will need to install pymongo module using pip:</p>

<pre><code class="bash Installing pymongo">pip install pymongo
</code></pre>

<h3>Saving the items in db</h3>

<p>To be able to save the items gathered you will need to add some configuration to your project and also add some code to your pipelines.py.</p>

<h4>Setting up a Pipeline</h4>

<p>First, let’s see how the pipeline works. We will define a new class called MongoDBPipeline. This class has a constructor and a process_item method that will be called whenever a new item is created.</p>

<p>We will be using the <strong>process_item</strong> to check the validity of the item first, then it will be checked against a list called <strong>ids_seen</strong>. This list contains all the items that we already processed. We will ensure this way that there will be  no duplicated items in our database.</p>

<p>If the item is valid and it is not in our list of previous items then we ca add it to our mongo database.</p>

<pre><code class="python Validating and adding the item to our mongodb">    def process_item(self, item, spider):

        valid = True
        for data in item:
            if not data:
                valid = False
                raise DropItem("Missing {0}!".format(data))

        if valid and item['jobid'] not in self.ids_seen:
            self.collection.insert(dict(item))
            self.ids_seen.add(item['jobid'])            
            log.msg("Job added to MongoDB database!",
                    level=log.DEBUG, spider=spider)
        else:
            raise DropItem("Job id {0} already exists!".format(item['jobid']))    

        return item        
</code></pre>

<p>Now, we need to check out the constructor for this class. Here we initialise the connection and fill the <strong>ids_seen</strong> list with the identifiers that we already have in the database.</p>

<pre><code class="python Initialising database connection and fill up our id list.">import pymongo
import sys

from scrapy.conf import settings
from scrapy.exceptions import DropItem
from scrapy import log

class MongoDBPipeline(object):
    def __init__(self):
        connection = pymongo.MongoClient(
            settings['MONGODB_SERVER'],
            settings['MONGODB_PORT']
        )
        db = connection[settings['MONGODB_DB']]
        self.collection = db[settings['MONGODB_COLLECTION']]
        self.ids_seen = set()
        for job in self.collection.find():
            self.ids_seen.add(job['jobid'])

        print "Number of jobs in database"
        print len(self.ids_seen)
</code></pre>

<h4>Configuring the mongodb connection.</h4>

<p>We need to do a little more work in order to be able to connect to the database and to register the newly added MongoDBPipeline, so it is actually called on the new items. In the settings.py, we need to added either add or modify the following line, so it looks like this:</p>

<pre><code class="python ">ITEM_PIPELINES = {'stackjobs.pipelines.MongoDBPipeline' : 300, }

MONGODB_SERVER = "localhost"
MONGODB_PORT = 27017
MONGODB_DB = "stackoverflow"
MONGODB_COLLECTION = "jobs"
</code></pre>

<p>With the first line, we register our pipeline class on the system and assign a priority. With this mechanism, we can specify    in what we order we want the pipelines to be executed, if we would have more than one pipelines.</p>

<p>The four lines after that are specifying how to connect to the database, such as the name of the server and server port, database name and collection name (table name).</p>

<p>With these changes we can now run our parser and all items scraped will be stored in our mongo database.</p>

<h3>Exporting data from mongo</h3>

<p>What to do next? Maybe, we want to export the data to a file, so we can do further analysis and cleaning up on it. For this, I used the mongoexport command with the following parameters to create a csv file</p>

<pre><code class="bash Exporting data to csv file.">mongoexport --db stackoverflow --collection jobs --type csv --fields jobid,title,employer,location,salary,description,tags,url,date --out stackoverflow_jobs.csv
</code></pre>

<p>It is also possible to export the data in son format, if needed.  For that, you can use the following command:</p>

<pre><code class="bash Exporting data in json format. ">mongoexport --db stackoverflow --collection jobs --type json --fields jobid,title,employer,location,salary,description,tags,url,date --out stackoverflow_jobs.json
</code></pre>

<h3>Scheduling our job</h3>

<p>The last thing we need to do is to schedule our scraper to run on my mac. This can be achieved using crontab. I will schedule my scraper to run in every 6 hours as I do not think that running it more often would make sense.</p>

<p>First, you will need to start the nano editor to edit your crontab file:</p>

<pre><code class="bash Launching nano to edit crontab.">env EDITOR=nano crontab -e
</code></pre>

<p>Now enter the following to run our scraper every 6 hours. Use Ctrl-0 and Ctrl-X to exit the editor and save.</p>

<pre><code class="bash Enter this line to your crontab file. ">0 */6 * * *  cd ~/dev/scrapers/stackjobs &amp;&amp; /usr/local/bin/scrapy crawl Stackjob
</code></pre>

<p>To list the existing crontab jobs, we can use the following command:</p>

<pre><code class="bash Listing existing crontab jobs ">crontab -l 
</code></pre>

<h3>Summary</h3>

<p>In this part, we have installed mongodb on our machine and added logic and configuration to the scrapy project, so we can save all items that has been found to the database. Also, We have added a way to export the data into CSV or JSON file format from the mongo database. Finally, added this script to the crontab job and scheduled to run it every 2 hours.</p>

<p>In the next part, I will spend a little time on the exported data and use pandas to transform the exported data into a a better consumable format.</p>

<h3>Additional Information:</h3>

<ul>
<li><a href="https://ole.michelsen.dk/blog/schedule-jobs-with-crontab-on-mac-osx.html">Schedule jobs with crontab on Mac OS X</a></li>
<li><a href="http://alvinalexander.com/linux/unix-linux-crontab-every-minute-hour-day-syntax">Unix &amp; Linux crontab every examples</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
