<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: protobuf.net | littlebigtomatoes]]></title>
  <link href="http://www.littlebigtomatoes.com/blog/categories/protobuf-dot-net/atom.xml" rel="self"/>
  <link href="http://www.littlebigtomatoes.com/"/>
  <updated>2016-07-23T23:17:25+02:00</updated>
  <id>http://www.littlebigtomatoes.com/</id>
  <author>
    <name><![CDATA[Krisztian Gyuris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serializing Empty IEnumerable<T> With protobuf.net]]></title>
    <link href="http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net/"/>
    <updated>2015-10-30T17:06:13+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net</id>
    <content type="html"><![CDATA[<p>I am recently trying to use protobuf.net for serializing objects for network communication in a .net application. Protobuf is a great format for sending data. Protobuf tries to be very frugal to save bandwidth. However, this causes some unexpected side effects when using it with .NET.</p>

<!-- more -->


<p>For example, If there is a collection serialized and the collection count was zero, then the serializer is going to write out null and this collection will be deserialized as null on the other end.</p>

<p>This is easy to fix when you have only a few classes that holding your models, but can be a huge problem when you have a very large number of classes that you are trying to serialize and the previously used serializer was always deserializing an empty collection to an empty collection.</p>

<p>To solve this, we need extra wrapper class and within this wrapper class it is possible to detect if the underlying generic type is a IEnumerable&lt;T&gt; and create code to initialize the data member as an empty collection if needed.</p>

<p>The code below demonstrates how to use this technique.</p>

<pre><code class="csharp creating empty collection in data wrapper ">    public class DataWrapper&lt;T&gt;
    {    
        public T Data { get; set; }
        public DataWrapper()
        {
            Type dataType = typeof(T);

            // Protobuf deserializes empty collections as null in order to combat this we create an empty collection by default
            if (dataType.IsGenericType &amp;&amp; dataType.GetGenericTypeDefinition() == typeof(IEnumerable&lt;&gt;))
            {
                Type underlyingType = entityType.GetGenericArguments()[0];

                var listType = typeof(List&lt;&gt;);
                var concreteType = listType.MakeGenericType(underlyingType);

                Data = (TEntity)Activator.CreateInstance(concreteType);
            }
            else
            {
                Data = default(T);
            }
         }
     }
</code></pre>
]]></content>
  </entry>
  
</feed>
