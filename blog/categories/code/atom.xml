<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | My Octopress Blog]]></title>
  <link href="http://gyurisc.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://gyurisc.github.io/"/>
  <updated>2014-10-22T13:54:40+02:00</updated>
  <id>http://gyurisc.github.io/</id>
  <author>
    <name><![CDATA[Krisztian Gyuris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple.Data and Dynamic Calls Are Awesome]]></title>
    <link href="http://gyurisc.github.io/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome/"/>
    <updated>2013-06-17T11:59:00+02:00</updated>
    <id>http://gyurisc.github.io/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome</id>
    <content type="html"><![CDATA[<p>Couple of weeks ago I started to look into different open source packages on the .NET platform such as <a href="http://nancyfx.org/">Nancy</a> and <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Simple.Data</a>. They all looked very cool, but one paragraph in an article called <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Introducing Simple.Data</a> - explaining how the code snippet below works - caught my attention:</p>

<pre><code class="csharp getting data from db ">var db = Database.Open(); // Connection specified in config.
var user = db.Users.FindByNameAndPassword(name, password);
</code></pre>

<p><blockquote><p>That’s pretty neat, right? So, did we have to generate the Database class and a bunch of table classes to make this work?</p></p><p><p>No.</p></p><p><p>In this example, the type returned by Database.Open() is dynamic. It doesn’t have a Users property, but when that property is referenced on it, it returns a new instance of a DynamicTable type, again as dynamic. That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters. The FindBy<em> methods will only return one record; there are FindAllBy</em> methods which return result sets. This approach is used by the Ruby/Rails ActiveRecord library; Ruby’s metaprogramming nature encourages stuff like this.</p><footer><strong>Mark Rendle <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data">http://blog.markrendle.net/2010/08/05/introducing-simple-data</a> Introducing Simple.Data</strong></footer></blockquote></p>

<p>Just read that sentence once again&hellip;</p>

<p><em>That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters.</em></p>

<p>This sounds like crazy awesome magic and I need to understand it!</p>

<h2>How magic works?</h2>

<p>To find out how the magic worked, I downloaded the source code from github and started to poke around the code. The rest of the article explains what I got out of this experiment.</p>

<!--more-->


<p></p>

<p>The sample project I created is sort of the skeleton of what Simple.Data does on the inside. This is not an attempt to reproduce or fully understand the library. I just wanted to understand how one can call a non-existing method on a class and what is happening behind the curtain that enables this at runtime.</p>

<pre><code class="csharp disecting the magic    ">  class Program
  {
    static void Main(string[] args)
    {
      var dyn = DynamicTest.GetDynamic();
      var user = dyn.Users.FindByEmail("someone@somewhere.com");
    }
  }
</code></pre>

<p>So, after poking around in the <a href="https://github.com/markrendle/Simple.Data">source code</a> of Simple.Data I realized that the magic happens by applying the <a href="http://msdn.microsoft.com/en-us/library/vstudio/dd264741.aspx">dynamic</a> keyword and DynamicObject.</p>

<pre><code class="csharp DynamicObject skeleton     ">  public class DynamicTest : DynamicObject
  {
    public static dynamic GetDynamic()
    {
      if (_instance == null)
      {
        _instance = new DynamicTest();
      }

      return _instance;
    }
  }
</code></pre>

<p>I created a class that derives from DynamicObject and a method that returns an instance of this object, but instead of a return type I added the dynamic keyword to the method signature. What this does effectively is that when compiling my simple test code, the compiler will not look for the declaration of a Users property. It knows that this will resolved at runtime.</p>

<p>Once running this code there will be a RuntimeBinderException exception thrown with the the following message:</p>

<pre><code>    Message='object' does not contain a definition for 'Users'
</code></pre>

<p>Now, we need to somehow create a Users property on the DynamicTest class. For this, we need to override the TryGetMember method of the DynamicObject and implement this behavior.</p>

<p>So, TryGetMember will just create and return an instance of an ObjectReference object. It has a parameter called binder that has information about the member that is called and an out parameter to pass back the result. The created object will be stored with binder.Name as key, so next time the same instance can be returned. This will represent the <strong>.User</strong> part of our dynamic call. But how will we handle the remaining method call?</p>

<pre><code class="csharp TryGetMember implementation ">    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
      result = GetOrAddDynamicReference(binder.Name);
      return true; 
    }

    private dynamic GetOrAddDynamicReference(string name)
    {
      return _members.GetOrAdd(name, new ObjectReference(name));
    }
</code></pre>

<p>ObjectReference is also derived from DynamicObject and it overrides the TryInvokeMember method to handle the remaining method call. Again, it receives a binder that contains information about the member that is being invoked, the parameters that is passed in and it has an out parameter that is used to pass back the result. What this method does is just simply prints out the method that is being invoked and its parameters.</p>

<pre><code class="csharp TryInvokeMember implementation">    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
      if (base.TryInvokeMember(binder, args, out result)) return true;

      try
      {
        Console.WriteLine("Called " + 
                          _name + "." + 
                          binder.Name + 
                          "(" + 
                          args.Aggregate((current, next) =&gt; current + ", " + next) + 
                          ")");

        result = "result";
        return true;
      } catch
      {
        throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
      }

      throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
    }
</code></pre>

<p>Now, that I better understand how all this works I realized that I am way behind with the new features of C#. I guess, I need to buy a book about the last version of the language, read it and learn a bit more as I am behind. Below is the full sample code that I created:</p>

<pre><code class="csharp full source code for dynamic test">using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DynamicTest
{
  class Program
  {
    static void Main(string[] args)
    {
      var dyn = DynamicTest.GetDynamic();
      var user = dyn.Users.FindByEmail("someone@somewhere.com");
    }
  }

  public class DynamicTest : DynamicObject
  {
    private readonly ConcurrentDictionary&lt;string, dynamic&gt; _members = new ConcurrentDictionary&lt;string, dynamic&gt;();

    private static DynamicTest _instance; 

    public static dynamic GetDynamic()
    {
      if (_instance == null)
      {
        _instance = new DynamicTest();
      }

      return _instance;
    }

    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
      result = GetOrAddDynamicReference(binder.Name);
      return true; 
    }

    private dynamic GetOrAddDynamicReference(string name)
    {
      return _members.GetOrAdd(name, new ObjectReference(name));
    }
  }

  public class ObjectReference : DynamicObject
  {
    private string _name;

    public ObjectReference(string name)
    {
      _name = name;
    }

    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
      if (base.TryInvokeMember(binder, args, out result)) return true;

      try
      {
        Console.WriteLine("Called " + 
                          _name + "." + 
                          binder.Name + 
                          "(" + 
                          args.Aggregate((current, next) =&gt; current + ", " + next) + 
                          ")");

        result = "result";
        return true;
      } catch
      {
        throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
      }

      throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
    }
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Xamarin iOS on Windows]]></title>
    <link href="http://gyurisc.github.io/2013/03/exploring-xamarin-ios-on-windows/"/>
    <updated>2013-03-28T08:24:00+01:00</updated>
    <id>http://gyurisc.github.io/2013/03/exploring-xamarin-ios-on-windows</id>
    <content type="html"><![CDATA[<p>Xamarin not so long ago released the version 2.0 of their product that allows all .NET developers to use C# and .NET libraries to code apps for iOS and Android. Better yet, it allows us to use our bellowed Visual Studio.NET to code for these platforms.</p>

<p>I love to try out new things, so I decide to figure out if it is really possible to create very basic application for iOS and for Android purely from Visual Studio.NET.</p>

<!--more-->


<p></p>

<p>The one thing I need to add is that I am without any knowledge of Objective-C or the iOS platform. I can construct the very basic HelloWorld app in XCode, but this is how far my iOS knowledge reaches. Regarding Android, I have zero knowledge of the platform and how to construct the HelloWorld app for the platform. Nevertheless, I give it a try and document my ups and downs creating these apps in vs.net.</p>

<h3>Creating a new project</h3>

<p>I installed the Xamarin environment and started up Visual Studio.NET 2012. Selected File | New Project and created the project.</p>

<p><img src="/images/xam_vs_001.png" title="&lsquo;New Project&rsquo; &lsquo;Creating new project for iOS in Visual Studio&rsquo;" ></p>

<p>In order to be able to use Visual Studio.NET with Xamarin, you need the Business version or you will need to start the 30 days trial. I opted for the second option.</p>

<p>But first begin the <a href="http://docs.xamarin.com/guides/cross-platform/getting_started/beginning_a_xamarin_trial">30 days trial</a>.</p>

<p><img src="/images/xam_vs_002.png" title="&lsquo;Starting the 30 days trial&rsquo; &lsquo;Starting the 30 days trial&rsquo;" ></p>

<p>After creating and logging in with the Xamarin account the 30 days trial starts and Visual Studio .NET restarts. It starts searching on the network for active OS X machines to be used as build machine. I have nothing like that on my network, so let’s close the dialog.</p>

<p><img src="/images/xam_vs_003.png" title="&lsquo;Searching for build machine&rsquo; &lsquo;Searching for build machine&rsquo;" ></p>

<p>I have no mac machine on the network currently so let’s choose <strong>Close</strong>.</p>

<p>// footnote???
Minor inconvenience is that you will need a live network connection for Xamarin software to check the license with the server and this can be problematic, if you are doing this while you are commuting without network.</p>

<h3>Dude, where is my design surface?</h3>

<p>I created my HelloWorld project and my limited iOS knowledge tells me that this point I need to open .xib or .nib file and start dragging controls onto the design surface. Looking through the project there are no .xib files to open. Searching through the Add New Item dialog yields no result as well.</p>

<p>Looking through the guide I find the following section:</p>

<p><blockquote><p>Storyboard and XIB files (used by Apple’s Interface Builder for GUI design) cannot currently be edited in Visual Studio. If you create an application from a Storyboard template (or a template that includes XIB files) then you’ll have to switch to the Mac and open the entire solution in Xamarin Studio. From within Xamarin Studio, double-click on XIBs or Storyboards to open and edit them. This includes adding a new item after the project is created, from the following options:</p></p><p><p>Working with Storyboards and XIBs</p></p><p><p>Editing storyboard and XIB files must be done on OS X with Interface Builder. The Xamarin.iOS plug-in for Visual Studio does not provide any support for this.</p><footer><strong>Xamarin <a href="http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio">http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio</a> Introduction to Xamarin iOS for Visual Studio</strong></footer></blockquote></p>

<p><a href="http://xamarin.com/guide/">Xamarin Guide</a> explains the alternatives in greater details:</p>

<p><blockquote><p>Xamarin.iOS for Visual Studio comes with several simplified iOS application templates that eschew XIB and Storyboard files, giving developers the option of building their entire user interface in code.  That approach could be desirable for some developers on Windows who want to avoid Xcode and minimize their reliance on a Mac. Xamarin’s MonoTouch.Dialog library— which provides a simple, declarative API for building iOS user interface layouts in code—might prove especially useful for that particular audience.</p></p><p><p>Developers who still want to use XIB or Storyboard files can still use Xcode on Mac OS X in order to modify the layout. Fortunately, the high degree of interoperability between Xamarin Studio and Visual Studio makes that a relatively straightforward process. A developer can do most of their development with Visual Studio on Windows and jump over to Xamarin Studio on a Mac while working on user interface design. The same exact project and solution files can be used in both environments.</p><footer><strong>Xamarin <a href="http://xamarin.com/guide/">http://xamarin.com/guide/</a> Xamarin Guide</strong></footer></blockquote></p>

<p>So you can get rid of XIB if you like and define your UI entirely using the dialog library or you can use XiB but then you need a Mac too.</p>

<h3>Rebooting to OS X</h3>

<p>I decided to stay with the path I know and restarted my macbook to boot OS X. This way I can use the xib approach for now and once I finished I will be going back to Visual Studio.</p>

<p><img src="/images/xam_vs_004.png" title="&lsquo;Xamarin Studio on OS X&rsquo; &lsquo;Looking at Xamarin Studio in OS X&rsquo;" ></p>

<p>Opening the project in Xamarin Studio I realized that I have no idea how to integrate a new storyboard to my project, so I opted to create a brand new project that has a xib file included. It is not a very high-tech move, but sometimes it pays to create your project from scratch.</p>

<p><img src="/images/xam_vs_005.png" title="&lsquo;Creating a new project&rsquo; &lsquo;Creating a new project&rsquo;" ></p>

<h3>Creating the UI in XCode</h3>

<p>Once the new project is created, I can open the xib file in XCode to add my controls and create actions and outlets for these controls. I started with dragging a label and a button onto the design surface.</p>

<p><img src="/images/xam_vs_006.png" title="&lsquo;Dragging the controls in XCode&rsquo; &lsquo;Dragging the controls in XCode&rsquo;" ></p>

<p>Selecting the code icon in XCode will bring in the source control editor. I now can control-drag – clicking on the control while dragging the control to the source code editor – to create my outlet for the Label and the action for my button.</p>

<p><img src="/images/xam_vs_007.png" title="&lsquo;Press this button to bring in the source code editor in XCode&rsquo; &lsquo;Press this button to bring in the source code editor in XCode&rsquo;" ></p>

<p>Pressing control and dragging the button to the source code editor will bring up a little window that allows me to set up the action for my button. I changed the connection type to action and name it btnPRessed.</p>

<p><img src="/images/xam_vs_008.png" title="&lsquo;Creating an action for the button in XCode&rsquo; &lsquo;Creating an action for the button in XCode&rsquo;" ></p>

<p>I do the same control dragging for the labe, but this time the connection type is set to outlet and the name lblText.</p>

<p><img src="/images/xam_vs_009.png" title="&lsquo;Creating an outlet for the label in XCode&rsquo; &lsquo;Creating an outlet for the label in XCode&rsquo;" ></p>

<p>The last important step is to make sure that you save the .xib file. I forget this most of the time annd the result is that these changes will not be generated in the code behind for the view controlller. Back in Xamarin Studio, I can confirm by looking at the codebehind for the view controller that the outlet and action for my controlls are showing up in the code. Let’s go back to Visual Studio.NET.</p>

<p><img src="/images/xam_vs_010.png" title="&lsquo;Codebehind for the ViewController in Xamarin Studio shows that the constructs for my controlls are generated&rsquo; &lsquo;Codebehind for the ViewController in Xamarin Studio&rsquo;" ></p>

<h3>Back to Visual Studio</h3>

<p>All I have left is to define the event handler – or action method if you like for my button and set the content of the label. The action is defined as a partial method in the code-behind, so I need to provide the implementation for my method. With this I am finished constructing my very basic application for iOS. All is left to test it on a Mac in an emulator to see if it works.</p>

<p><img src="/images/xam_vs_011.png" title="&lsquo;Partial method for the button in Visual Studio&rsquo; &lsquo;Partial method for the button in Visual Studio&rsquo;" ></p>

<h3>Conclusion</h3>

<p>Xamarin version 2.0 brings the possibility to develop for iOS from Visual Studio.NET for the first time. This is a very welcome change, but it has its own weakness. One is that for creating the UI you will need a Mac computer or you will need to code your whole UI in code. This can be addressed by creating a tool that allows us developers to do UI creation on Windows. Hopefully this will come in the next version. The other area that for testing and debugging you will not be able to live without a mac computer. Once again having a cheap mac computer on the network solves this problem. I have no experience how convenient the debugging, but I will try this soon.</p>

<p>Overall, I am very happy with the new version and the fact that they allow free use with limitation makes me very happy and probably I will invest my time to learn the technology. Well done, Xamarin!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With gridster.js]]></title>
    <link href="http://gyurisc.github.io/2013/03/getting-started-with-gridster-dot-js/"/>
    <updated>2013-03-08T17:24:00+01:00</updated>
    <id>http://gyurisc.github.io/2013/03/getting-started-with-gridster-dot-js</id>
    <content type="html"><![CDATA[<p>I am looking into to learn more about web client side programming, but whenever I find an interesting project I am overwhelmed with the unknown names of different libraries and technologies mentioned, while reading the project&rsquo;s page. Consider <a href="http://shopify.github.com/dashing/">Dashing</a> for example. They mention Sinatra, <a href="https://github.com/Shopify/dashing/wiki/How-to%3A-Deploy-to-Heroku">Heroku</a>, jQuery.. These are the ones that I have at least a slight idea what they are good for. But the list continues: <a href="https://github.com/sstephenson/sprockets">Sprockets</a>, <a href="http://gridster.net/">Gridster.js</a>, <a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/">Server Sent Events</a> and <a href="http://batmanjs.org/docs/batman.html#batman-view-bindings-keypath-filters">batman bindings</a>.</p>

<p>This is nuts, I do not understand any of these. So I decided to divide and conquer the problem and try to focus on one unknown technology at a time. The aim is not to master the library, but to construct a minimum viable sample that helps to understand what it is good for.</p>

<p>Let&rsquo;s start with <a href="http://gridster.net/">Gridster.js</a>.</p>

<p><img src="/images/gridster_demo.png" title="&lsquo;Gridster demo page&rsquo; &lsquo;Gridster demo page&rsquo;" ></p>

<p>The project page describes this library as:</p>

<!--more-->


<p></p>

<p><blockquote><p>Gridster is a jQuery plugin that allows building intuitive draggable layouts from elements spanning multiple columns. You can even dynamically add and remove elements from the grid. It is on par with sliced bread, or possibly better. MIT licensed. Suitable for children of all ages. Made by Ducksboard.</p></blockquote></p>

<h3>Making the minimum gridster page</h3>

<p>It seems that the library is good for creating grid layouts, where it is possible to re-arrange, add or remove dynamically the elements of the grid. Fair enough&hellip;</p>

<p>So I created an empty index.html and copied all css and javascript files to the assets folder. I added the following in the index.html:</p>

<pre><code class="html main grid">        &lt;section class="demo"&gt;
            &lt;div class="gridster"&gt;
                &lt;ul&gt;
                    &lt;li data-row="1" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;HELLO&lt;/h1&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;WORLD&lt;/h1&gt;&lt;/li&gt;
                    &lt;li data-row="3" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;OR ELSE&lt;h1&gt;&lt;/li&gt;
                    &lt;li data-row="1" data-col="2" data-sizex="2" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="2" data-sizex="2" data-sizey="2"&gt;&lt;/li&gt;
                    &lt;li data-row="1" data-col="4" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="4" data-sizex="2" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="3" data-col="4" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;               
                    &lt;li data-row="1" data-col="5" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="3" data-col="5" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="1" data-col="6" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="6" data-sizex="1" data-sizey="2"&gt;&lt;/li&gt;               
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/section&gt; 
</code></pre>

<p>The key here is the div with class gridster and the unordered list inside. The grid is represented by the unordered list and each of the list items inside the list are representing one grid cell in our grid.</p>

<pre><code class="html examining one cell in the grid">    &lt;li data-row="1" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;HELLO&lt;/h1&gt;&lt;/li&gt;
</code></pre>

<p>Looking at a list item in greater detail, you will see that there are attributes describing the cell&rsquo;s position in the table using the data-row and data-col attributes and the size of the cell using the data-sizex, data-sizey attributes.</p>

<p>Next we need to call some javascript in order to initialize our grid. This is done by the following javascript block</p>

<pre><code class="javascript initializing the grid">    &lt;script type="text/javascript"&gt;
            var gridster;

            $(function() {
                gridtster = $(".gridster &gt; ul").gridster({
                    widget_margins: [10, 10], 
                    widget_base_dimensions: [140, 140],
                    min_cols: 6
                }).data('gridster');
            });
        &lt;/script&gt; 
</code></pre>

<p>Javascript and jQuery are not in my comfort zone yet, but it seems that the code selects something that has .gridster as a class and have ul underneath and sets the widget margin, base dimensions of the grid and the minimum number of columns to 6.</p>

<p>Below, you will see the full html page and css styles. You can also <a href="/downloads/gridster_sample.zip">download</a> the sample, if you like.</p>

<h3>Full index.html</h3>

<pre><code class="html full index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;gridster test&lt;/title&gt;
        &lt;meta name="author" content="gyurisc"&gt;
        &lt;link rel="stylesheet" type="text/css" href="assets/css/jquery.gridster.css"&gt;
        &lt;link rel="stylesheet" type="text/css" href="assets/css/styles.css"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;section class="demo"&gt;
            &lt;div class="gridster"&gt;
                &lt;ul&gt;
                    &lt;li data-row="1" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;HELLO&lt;/h1&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;WORLD&lt;/h1&gt;&lt;/li&gt;
                    &lt;li data-row="3" data-col="1" data-sizex="1" data-sizey="1"&gt;&lt;h1&gt;OR ELSE&lt;h1&gt;&lt;/l&gt;
                    &lt;li data-row="1" data-col="2" data-sizex="2" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="2" data-sizex="2" data-sizey="2"&gt;&lt;/li&gt;
                    &lt;li data-row="1" data-col="4" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="4" data-sizex="2" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="3" data-col="4" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;           
                    &lt;li data-row="1" data-col="5" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="3" data-col="5" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="1" data-col="6" data-sizex="1" data-sizey="1"&gt;&lt;/li&gt;
                    &lt;li data-row="2" data-col="6" data-sizex="1" data-sizey="2"&gt;&lt;/li&gt;               
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/section&gt;
        &lt;script type="text/javascript" src="assets/jquery.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript" src="assets/jquery.gridster.js" charster="utf-8"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            var gridster;

            $(function() {
                gridtster = $(".gridster &gt; ul").gridster({
                    widget_margins: [10, 10], 
                    widget_base_dimensions: [140, 140],
                    min_cols: 6
                }).data('gridster');
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>Full styles.css</h3>

<pre><code class="css styles.css">body {
    background-color: #EEEEEE;
    font-family: 'Helvetica Neue', Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    font-size: x-small;
    color: #666666;
}

ul, ol {
    list-style: none;
}

h1 {
  margin-bottom: 12px;
  text-align: center;
  font-size: 30px;
  font-weight: 400; 
}

h3 {
  font-size: 25px;
  font-weight: 600;
  color: white; 
}

/* Gridster styles */
.demo {
    margin: 3em 0;
    padding: 7.5em 0 5.5em;
    background: #004756;
}

.demo:hover .gridster {
    opacity: 1;
}

.gridster {
    width: 940px;
    margin: 0 auto;

    opacity: .8;

    -webkit-transition: opacity .6s;
    -moz-transition: opacity .6s;
    -o-transition: opacity .6s;
    -ms-transition: opacity .6s;
    transition: opacity .6s;
}

.gridster .gs_w {
    background: #FFF;
    cursor: pointer;
    -webkit-box-shadow: 0 0 5px rgba(0,0,0,0.3);
    box-shadow: 0 0 5px rgba(0,0,0,0.3);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git and Visual Studio Are Awesome Together]]></title>
    <link href="http://gyurisc.github.io/2013/03/git-and-visual-studio-are-awesome-together/"/>
    <updated>2013-03-01T19:59:00+01:00</updated>
    <id>http://gyurisc.github.io/2013/03/git-and-visual-studio-are-awesome-together</id>
    <content type="html"><![CDATA[<p>I love Visual Studio and I love git too. What can be even better than this? Visual Studio 2012 integrated with Git. The two together are pure awesomeness and I fell in love with them.</p>

<p><img src="/images/git_vs_001.png" title="&lsquo;Git SSCP&rsquo; &lsquo;Git Source Control Provider&rsquo;" ></p>

<p>There is a provider that you can install in visual studio 2012 and you will get git integration. It can talk to tfs, if you use git there. IT can create local git repos and even can clone repositories from github or from other git hosting servers.</p>

<!--more-->


<p></p>

<p>To get the source control provider installed, you need to download and install the <a href="http://gitscc.codeplex.com/">Git Source Control Provider</a> package from codeplex. Once you are finished, launch Visual Studio and just open team explorer. You can connect to TFS hosted project or to local git repositories.</p>

<p><img src="/images/git_vs_002.png" title="&lsquo;Git SSCP&rsquo; &lsquo;Git Source Control Provider&rsquo;" ></p>

<h2>Getting familiar</h2>

<p>You can create a new repo by just providing the folder name.</p>

<p><img src="/images/git_vs_003.png" title="&lsquo;Git New&rsquo; &lsquo;Creating a new Git repo&rsquo;" ></p>

<p>Once you are done, navigate there using git bash and you will see that it is a proper git repo.</p>

<p><img src="/images/git_vs_004.png" title="&lsquo;Git Bash&rsquo; &lsquo;New repository from git bash&rsquo;" ></p>

<p>You can add existing local repos as well by providing the path</p>

<p><img src="/images/git_vs_005.png" title="&lsquo;Existing Repos&rsquo; &lsquo;Adding existing git repositories&rsquo;" ></p>

<p>Clone existing repos form github</p>

<p><img src="/images/git_vs_006.png" title="&lsquo;Cloning Repos&rsquo; &lsquo;Cloning repos from github&rsquo;" ></p>

<h2>Nice touches</h2>

<p>There are several things to like in the visual studio git integration. You can change your git settings from git explorer such as gitignore file, your email, the root folder for your repos, even it can get your images for you, to make the history to look nicer.</p>

<p>There is also a super nice and clean looking diff tool for you to go through the differences in commits.</p>

<p><img src="/images/git_vs_007.png" title="&lsquo;Diff tool&rsquo; &lsquo;Nice and clear diff tool in IDE&rsquo;" ></p>

<h2>The Bad</h2>

<p>The one thing I do not like is that there is no way to open the solution from the ide. You need to browse out the solution manually. Obviously, this does not happen when you clone from TFS. Little inconvenience, but still tolerable though.</p>

<p>Now go download it and use it. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the SelectedItems Property Binding for the Silverlight Listbox Control]]></title>
    <link href="http://gyurisc.github.io/2013/02/fixing-the-selecteditems-property-binding-for-the-silverlight-listbox-control/"/>
    <updated>2013-02-21T15:43:00+01:00</updated>
    <id>http://gyurisc.github.io/2013/02/fixing-the-selecteditems-property-binding-for-the-silverlight-listbox-control</id>
    <content type="html"><![CDATA[<p>I recently had to implement a feature in our silverlight app, where the user can remove multiple items selected in a listbox. The project uses the MVVM pattern, so all logic and state is handle in the ViewModel class. When trying to implement the multiple selection, I needed to add a property to my viewmodel that would be a reflection of the items selected on the view. It turns out the ListBox control does not support binding against the SelectedItems property for some reason.</p>

<p>This article describe, how the problem has been solved.</p>

<!--more-->


<p></p>

<h3>Solution:</h3>

<p>The full code for the classes is included at the end of the article.<br/>
The idea here is to able to create a two-way binding that would be able to represent the items selected in the listbox control. The definition for the property that holds the selected items on the viewmodel side would be defined like this:</p>

<pre><code class="csharp property definition for the view model ">    private ObservableCollection&lt;string&gt; _selectedItems = new ObservableCollection&lt;string&gt;();

    public ObservableCollection&lt;string&gt; SelectedItems
    {
      get { return _selectedItems; }
      set { _selectedItems = value; RaisePropertyChanged("SelectedItems"); }
    }
</code></pre>

<p>The expected behavior is that whenever the user selects one or more items in the listbox our SelectedItems property would be able to hold selections and notify all parties that are subscribed to the changes of our collections. This is why the ObservableCollection<T> type is picked for this property.</p>

<p>Next on the view side we would like to add a databinding that binds the listbox&rsquo;s selecteditems collection to our view-model SelectedItems property. As the listbox is not allowing to bind to this property, we need to have a new control called SmartListbox.</p>

<p>The binding expression is the most important one here. On the left hand side you can see the SmartSelectedItems property of the SmartListBox. On the right hand side of the binding expression there is the SelectedItems property of our viewmodel. For the rest of the article, I will refer these properties as left side and right side of the binding expression.</p>

<pre><code class="xml SmartListBox ">    &lt;my:SmartListBox HorizontalAlignment="Stretch" x:Name="smartListBox" 
                     VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" 
                     ItemsSource="{Binding Items, Mode=TwoWay}" SmartSelectedItems="{Binding SelectedItems, Mode=TwoWay}"
                     SelectionMode="Extended" /&gt;
</code></pre>

<p>To be able to bind to a property in Xaml word the property needs to be defined as a DependencyProperty. This will be consisting a static and a non-static definition of the property. The static definition describes the property, so the runtime and editor tools will understand what the property type is, what the name of the property is and so on&hellip;</p>

<pre><code class="csharp DependencyProperty definition ">    public static readonly DependencyProperty SmartSelectedItemsProperty =
      DependencyProperty.Register("SmartSelectedItems", typeof(INotifyCollectionChanged), typeof(SmartListBox), new PropertyMetadata(OnSmartSelectedItemsPropertyChanged));

    public INotifyCollectionChanged SmartSelectedItems
    {
      get { return (INotifyCollectionChanged)GetValue(SmartSelectedItemsProperty); }
      set { SetValue(SmartSelectedItemsProperty, value); }
    }
</code></pre>

<p>The general idea here is that we have two collections and we need to be able to detect and synchronize the changes between them, so we subscribe to the SmartListbox collection changes and we also subscribe to the changes of the collection that binds to our property.</p>

<p>In the constructor we simply just subscribe to the changes of our control</p>

<pre><code class="csharp SmartListBox constructor ">    public SmartListBox()
    {
      SelectionChanged += new SelectionChangedEventHandler(BaseListBoxSelectionChanged);
    }
</code></pre>

<p>When the dependency property is defined we referenced a method called OnSmartSelectedItemsPropertyChanged. The purpose of the method is to handle the subscription to the dependency property. We would like to detect everything that happens to the right side collection in the binding, so we can support two way bindings as well.</p>

<p>You might notice the weirdness of the subscription here - the unsubscribe before subscribe - this is needed because if a view is visited more than binding is evaluated every time and we would end up subscribing to the collection more than once. This is unneeded, so the best is to make sure that we have one subscription only. Kudos for this tip to my colleague Mr. Rajnai for the tip.</p>

<pre><code class="csharp Handling collection changes">    private static void OnSmartSelectedItemsPropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs args)
    {
      var collection = args.NewValue as INotifyCollectionChanged;
      if (collection != null)
      {
        // unsubscribe, before subscribe to make sure not to have multiple subscription
        collection.CollectionChanged -= ((SmartListBox)target).SmartSelectedItemsCollectionChanged;
        collection.CollectionChanged += ((SmartListBox)target).SmartSelectedItemsCollectionChanged;
      }
    }
</code></pre>

<p>The next method is handling the changes in the right hand side of the binding expression. The control unsubscribes from all collection notification, then transfers the selected items from the right hand side collection to the left hand side collection and then subscribes back to the events. The unsubscribe-subscribe is need this because there is no need to trigger any notifications to the collection that is being updated.</p>

<pre><code class="csharp Handling selection changes ">    void SmartSelectedItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
      //Need to unsubscribe from the events so we don't override the transfer
      UnsubscribeFromEvents();

      //Move items from the selected items list to the list box selection
      Transfer(SmartSelectedItems as IList, base.SelectedItems);

      //subscribe to the events again so we know when changes are made
      SubscribeToEvents();
    }
</code></pre>

<p>The following method is responsible to handle the changes when the selected items in the listbox are changing.</p>

<pre><code class="csharp ">    void BaseListBoxSelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      //Need to unsubscribe from the events so we don't override the transfer
      UnsubscribeFromEvents();

      //Move items from the selected items list to the list box selection
      Transfer(base.SelectedItems, SmartSelectedItems as IList);

      //subscribe to the events again so we know when changes are made
      SubscribeToEvents();
    }
</code></pre>

<p>There is one possible risk with the implementation though. The dependency property is defined as INotifyCollectionChanged, but the code works with IList when doing the transfer. It is possible that the control binds against a property in the future that not implementing the IList. What will happen then?</p>

<p>Well, in the worst case when the Transfer method is called the conversion to IList results a null and the method simply returns resulting the binding to be not working. This is not ideal, but it solves the problem I faced.</p>

<p>Obviously, if this control would be sold to third parties the hidden requirement to also implement the IList for the viewmodel property needed to be addressed in some ways.</p>

<p><strong>Disclaimer:</strong> I do not work in vacuum nor inventing everything from scratch. I rely on google searching when coding and to find great solutions from fellow developers. For this particular problem, I found this great article and it served me as a starting point:</p>

<p><a href="http://blog.bdcsoft.com/developer-blog/2011/no-binding-for-you-a-listbox-selecteditems-behavior-solution/">No Binding for you a ListBox SelectedItems behavior solution</a></p>

<h3>Full code</h3>

<pre><code class="csharp SmartListBox full class">  public class SmartListBox : ListBox
  {
    #region Properties 

    public static readonly DependencyProperty SmartSelectedItemsProperty =
      DependencyProperty.Register("SmartSelectedItems", typeof(INotifyCollectionChanged), typeof(SmartListBox), new PropertyMetadata(OnSmartSelectedItemsPropertyChanged));

    public INotifyCollectionChanged SmartSelectedItems
    {
      get { return (INotifyCollectionChanged)GetValue(SmartSelectedItemsProperty); }
      set { SetValue(SmartSelectedItemsProperty, value); }
    }

    #endregion

    public SmartListBox()
    {
      SelectionChanged += new SelectionChangedEventHandler(BaseListBoxSelectionChanged);
    }

    private static void OnSmartSelectedItemsPropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs args)
    {
      var collection = args.NewValue as INotifyCollectionChanged;
      if (collection != null)
      {
        // unsubscribe, before subscribe to make sure not to have multiple subscription
        collection.CollectionChanged -= ((SmartListBox)target).SmartSelectedItemsCollectionChanged;
        collection.CollectionChanged += ((SmartListBox)target).SmartSelectedItemsCollectionChanged;
      }
    }

    void SmartSelectedItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
      //Need to unsubscribe from the events so we don't override the transfer
      UnsubscribeFromEvents();

      //Move items from the selected items list to the list box selection
      Transfer(SmartSelectedItems as IList, base.SelectedItems);

      //subscribe to the events again so we know when changes are made
      SubscribeToEvents();
    }

    void BaseListBoxSelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      //Need to unsubscribe from the events so we don't override the transfer
      UnsubscribeFromEvents();

      //Move items from the selected items list to the list box selection
      Transfer(base.SelectedItems, SmartSelectedItems as IList);

      //subscribe to the events again so we know when changes are made
      SubscribeToEvents();
    }

    private void SubscribeToEvents()
    {
      SelectionChanged += BaseListBoxSelectionChanged;

      if (SmartSelectedItems != null)
      {
        SmartSelectedItems.CollectionChanged += SmartSelectedItemsCollectionChanged;
      }
    }

    private void Transfer(System.Collections.IList source, IList target)
    {
      if (source == null || target == null)
      {
        return;
      }

      target.Clear();

      foreach (var o in source)
      {
        target.Add(o);
      }
    }

    private void UnsubscribeFromEvents()
    {
      SelectionChanged -= BaseListBoxSelectionChanged;

      if (SmartSelectedItems != null)
      {
        SmartSelectedItems.CollectionChanged -= SmartSelectedItemsCollectionChanged;
      }
    }
  }
</code></pre>

<pre><code class="csharp ViewModel full class">  public class SmartListboxViewModel : ViewModelBase
  {
    public SmartListboxViewModel()
    {
      _selectedItems.CollectionChanged += (sender, args) =&gt; { SelectionCount = SelectedItems.Count; };
    }

    #region Properties
    private ObservableCollection&lt;string&gt; _items = new ObservableCollection&lt;string&gt;();

    public ObservableCollection&lt;string&gt; Items
    {
      get { return _items;  }
      set { _items = value; RaisePropertyChanged("Items"); }
    }

    private ObservableCollection&lt;string&gt; _selectedItems = new ObservableCollection&lt;string&gt;();

    public ObservableCollection&lt;string&gt; SelectedItems
    {
      get { return _selectedItems; }
      set { _selectedItems = value; RaisePropertyChanged("SelectedItems"); }
    }

    private int _selectionCount;

    public int SelectionCount
    {
      get { return _selectionCount; }
      set { _selectionCount = value; RaisePropertyChanged("SelectionCount"); }
    }

    #endregion
  }
</code></pre>
]]></content>
  </entry>
  
</feed>
