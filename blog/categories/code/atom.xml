<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | littlebigtomatoes]]></title>
  <link href="http://www.littlebigtomatoes.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://www.littlebigtomatoes.com/"/>
  <updated>2016-11-10T08:14:08+01:00</updated>
  <id>http://www.littlebigtomatoes.com/</id>
  <author>
    <name><![CDATA[Krisztian Gyuris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Handsontable]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/08/getting-started-with-handsontable/"/>
    <updated>2016-08-26T13:01:03+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/08/getting-started-with-handsontable</id>
    <content type="html"><![CDATA[<p>I am looking for a way to be able to display and manipulate tabular data on a webpage. For this, I decided to evaluate a few javascript based libraries and see how they can be used.</p>

<p>The first such library is called <a href="https://handsontable.com/">handsontable</a>. Handsontable is a Javascript/HTML5 Spreadsheet library for developers. It seems that Handsontable is more for building Excel like user interfaces than just simple data grid control.</p>

<p>So let’s look how easy to build a minimal example using with <a href="https://handsontable.com/">handsontable</a>…</p>

<p><img src="/images/handsontable_minimal.png" title="‘Handsontable Demo’ ‘Handsontable demo page'" ></p>

<!--more-->


<p></p>

<p>The main web-page describes this library as:</p>

<p><blockquote><p>Handsontable is a composite spreadsheet component for apps and websites. It is written in JavaScript and not constrained by any external framework. Handsontable can be easily modified or extended with custom plugins. It also binds to any source using the JSON format and is capable of handling a large amount of data. You can easily do all CRUD operations and provide end-users with an Excel-like experience.</p></blockquote></p>

<h3>Creating the minimal Handsontable page</h3>

<p>First of all, click to <a href="/downloads/handsontable_sample.zip">download the source code</a> for the minimal handsontable sample.</p>

<p>The first file to be created is the <strong>index.html</strong></p>

<pre><code class="html handsontable index.html">    &lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt;
        &lt;meta name="apple-touch-fullscreen" content="yes" /&gt;
        &lt;title&gt;Handsontable Minimum Sample&lt;/title&gt;
        &lt;link rel="stylesheet" type="text/css" href="assets/css/handsontable.full.css"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="table"&gt;&lt;/div&gt;
        &lt;script type="text/javascript" src="assets/handsontable.full.js"&gt;&lt;/script&gt;
                &lt;!-- Placeholder to Initialize Handsontable --&gt;
    &lt;/body&gt;    
&lt;/html&gt; 
</code></pre>

<p>Nothing too complicated here. This is only a standard html page. The table will be rendered in the first called table <strong>div</strong> after the body.</p>

<pre><code class="html handsontable div">     &lt;div id="table"&gt;&lt;/div&gt;
</code></pre>

<p>In the header part, the css for handsontable is referenced and in the bottom part of the body, we referenced the script file needed for our table. I choose to include these files in the assets folder in the zip file, but it is possible to reference these files directly from handsontable.com as well by replacing the links like this:</p>

<p>For CSS use:</p>

<pre><code class="html handsontable css reference ">    &lt;link rel="stylesheet" type="text/css" href="http://docs.handsontable.com/pro/bower_components/handsontable-pro/dist/handsontable.full.min.css"&gt;
</code></pre>

<p>For the script:</p>

<pre><code class="html handsontable javascript reference ">    &lt;script src="http://docs.handsontable.com/pro/bower_components/handsontable-pro/dist/handsontable.full.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>The important part comes next in a separate script tag. We are going to get the data for the table and initialise how the table should look like.</p>

<pre><code class="javascript initialising our table ">   &lt;script type="text/javascript"&gt;
        var data = [
                    {company: "Apple Inc.", ticker: "AAPL", price: "108.03", low52: "89.47", high52: "123.82", pe: "12.62", yield: "0.57"},
                    {company: "Amazon.com, Inc.", ticker: "AMZN", price: "757.25", low52: "466.25", high52: "773.75", pe: "188.83", yield: "-"},
                    {company: "Tesla Motors Inc", ticker: "TSLA", price: "222.62", low52: "141.05", high52: "271.57", pe: "-", yield: "-"},
                    {company: "Microsoft Corporation", ticker: "MSFT", price: "57.95", low52: "40.39", high52: "58.50", pe: "27.57", yield: "0.36"},
                    ]; 

            var table = document.getElementById('table');
            var hTable = new Handsontable(table, {
                data: data,              
                rowHeaders: true, 
                colHeaders: ['Company', 'Ticker', 'Price', '52 Low', '52 High', 'P/E', 'Dividend Yield'], 
                colWidths: 120, 
                rowHeights: 23, 
                autoRowSize: false, 
                autoColSize: true,  
            });
        &lt;/script&gt;
</code></pre>

<p>First, we create our data structure that we would like to display in our table.</p>

<p>Then, we get the placeholder div and call  the init function of the Handsontable library. In the init function, we pass the placeholder div and some other parameters like our data and the names of our columns.</p>

<p>This is really it. Could not be simpler, right?</p>

<h3>Some extras</h3>

<p>I would like to add the capability to be able to sort by column names. This is very easy, just pass two more parameters in the init function</p>

<pre><code class="javascript Enabling column ordering ">    columnSorting: true,
    sortIndicator: true,
</code></pre>

<p>Next, I would like to be able to resize the columns of my table. Again, this is very easy:</p>

<pre><code class="javascript Resizing columns">    manualRowResize: true,
    manualColumnResize: true
</code></pre>

<h3>Summary</h3>

<p>Handsontable seems like a very powerful library to build spreadsheet functionalities to your web application. It comes in two favours. The <a href="https://docs.handsontable.com/pro/1.5.1/tutorial-introduction.html">Pro</a> version will cost you money, but has really nice features, such as column filtering. The free version is open-source and as far as I understand you can use it however you see fit.</p>

<h3>Links</h3>

<p>This article will also server as a note for my future self, so here are the relevant links for this library:</p>

<ul>
<li><a href="https://docs.handsontable.com/pro/1.5.1/tutorial-introduction.html">Handsontable Documentation</a></li>
<li><a href="https://github.com/handsontable/handsontable">Handsontable on Github</a>.</li>
</ul>


<h3>Full index.html</h3>

<pre><code class="html full index.html ">&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt;
        &lt;meta name="apple-touch-fullscreen" content="yes" /&gt;
        &lt;title&gt;Handsontable Minimum Sample&lt;/title&gt;
        &lt;link rel="stylesheet" type="text/css" href="assets/css/handsontable.full.css"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id="table"&gt;&lt;/div&gt;
        &lt;script type="text/javascript" src="assets/handsontable.full.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
        var data = [
                    {company: "Apple Inc.", ticker: "AAPL", price: "108.03", low52: "89.47", high52: "123.82", pe: "12.62", yield: "0.57"},
                    {company: "Amazon.com, Inc.", ticker: "AMZN", price: "757.25", low52: "466.25", high52: "773.75", pe: "188.83", yield: "-"},
                    {company: "Tesla Motors Inc", ticker: "TSLA", price: "222.62", low52: "141.05", high52: "271.57", pe: "-", yield: "-"},
                    {company: "Microsoft Corporation", ticker: "MSFT", price: "57.95", low52: "40.39", high52: "58.50", pe: "27.57", yield: "0.36"},
                    ]; 

        var cols = [{ data: 'company', type: 'text', width: 140}, 
                    { data: 'ticker', type: 'text'}, 
                    { data: 'price', type: 'numeric'}, 
                    { data: 'low52', type: 'numeric'},
                    { data: 'high52', type: 'numeric'},
                    { data: 'pe', type: 'numeric'},
                    { data: 'yield', type: 'numeric', format: '0.00'}];               

            var table = document.getElementById('table');
            var hTable = new Handsontable(table, {
                data: data,
                columns: cols, 
                rowHeaders: true, 
                colHeaders: ['Company', 'Ticker', 'Price', '52 Low', '52 High', 'P/E', 'Dividend Yield'], 
                colWidths: 120, 
                rowHeights: 23, 
                columnSorting: true,
                sortIndicator: true,
                autoRowSize: false, 
                autoColSize: true,  
            });
        &lt;/script&gt;
    &lt;/body&gt;    
&lt;/html&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Generate Typescript Classes From C# Like a Pro]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/06/how-to-generate-typescript-classes-from-c-number-like-a-pro/"/>
    <updated>2016-06-13T13:29:09+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/06/how-to-generate-typescript-classes-from-c-number-like-a-pro</id>
    <content type="html"><![CDATA[<p>I will teach you how to create Typescript classes from your existing C# classes effortlessly like a pro within 30 seconds.</p>

<!-- more -->


<p>Sometimes, you will need to create typescript classes where the class already exists in C#. This is super boring and tedious, but here is a cool plugin to help you.</p>

<p>First you will need to install this plugin called <a href="https://visualstudiogallery.msdn.microsoft.com/eb0887f8-3ac1-434a-b50b-f0112f1572f7">TypescriptSyntaxPaste</a> in Visual Studio.NET 2015.</p>

<p><img src="/images/InstallTypescriptPaste_001.gif" title="&lsquo;Install TypeScriptSyntaxPaste plugin&rsquo; &lsquo;Animated git showing how to install TypeScriptSyntaxPage plugin in Visual Studio.NET 2015&rsquo;" ></p>

<h2>Installing it</h2>

<ul>
<li>Go to Tools | Extensions in Visual Studio .NET 2015.</li>
<li>Select Visual Studio Gallery under the Online category.</li>
<li>Search for TypescriptSyntaxPaste in the search folder.</li>
<li>Find the plugin in the results pane and click on Download.</li>
<li>Then click Install.</li>
<li>Restart Visual Studio.</li>
</ul>


<h2>Using it</h2>

<p>After installing the plugin this is how you use it:</p>

<p><img src="/images/UseTypeScriptPaste_002.gif" title="&lsquo;Using TypeScriptSyntaxPaste plugin&rsquo; &lsquo;Animated git showing how to use TypeScriptSyntaxPage plugin in Visual Studio.NET 2015&rsquo;" ></p>

<ul>
<li>Select your C# class and press Ctrl-C to copy.</li>
<li>Open a Typescript file (.ts or .tsx extension will work).</li>
<li>Paste the code.</li>
<li>Observe the results.</li>
</ul>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serializing Empty IEnumerable<T> With protobuf.net]]></title>
    <link href="http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net/"/>
    <updated>2015-10-30T17:06:13+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net</id>
    <content type="html"><![CDATA[<p>I am recently trying to use protobuf.net for serializing objects for network communication in a .net application. Protobuf is a great format for sending data. Protobuf tries to be very frugal to save bandwidth. However, this causes some unexpected side effects when using it with .NET.</p>

<!-- more -->


<p>For example, If there is a collection serialized and the collection count was zero, then the serializer is going to write out null and this collection will be deserialized as null on the other end.</p>

<p>This is easy to fix when you have only a few classes that holding your models, but can be a huge problem when you have a very large number of classes that you are trying to serialize and the previously used serializer was always deserializing an empty collection to an empty collection.</p>

<p>To solve this, we need extra wrapper class and within this wrapper class it is possible to detect if the underlying generic type is a IEnumerable&lt;T&gt; and create code to initialize the data member as an empty collection if needed.</p>

<p>The code below demonstrates how to use this technique.</p>

<pre><code class="csharp creating empty collection in data wrapper ">    public class DataWrapper&lt;T&gt;
    {    
        public T Data { get; set; }
        public DataWrapper()
        {
            Type dataType = typeof(T);

            // Protobuf deserializes empty collections as null in order to combat this we create an empty collection by default
            if (dataType.IsGenericType &amp;&amp; dataType.GetGenericTypeDefinition() == typeof(IEnumerable&lt;&gt;))
            {
                Type underlyingType = entityType.GetGenericArguments()[0];

                var listType = typeof(List&lt;&gt;);
                var concreteType = listType.MakeGenericType(underlyingType);

                Data = (TEntity)Activator.CreateInstance(concreteType);
            }
            else
            {
                Data = default(T);
            }
         }
     }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple.Data and Dynamic Calls Are Awesome]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome/"/>
    <updated>2013-06-17T11:59:00+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome</id>
    <content type="html"><![CDATA[<p>Couple of weeks ago I started to look into different open source packages on the .NET platform such as <a href="http://nancyfx.org/">Nancy</a> and <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Simple.Data</a>. They all looked very cool, but one paragraph in an article called <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Introducing Simple.Data</a> - explaining how the code snippet below works - caught my attention:</p>

<pre><code class="csharp getting data from db ">var db = Database.Open(); // Connection specified in config.
var user = db.Users.FindByNameAndPassword(name, password);
</code></pre>

<p><blockquote><p>That’s pretty neat, right? So, did we have to generate the Database class and a bunch of table classes to make this work?</p></p><p><p>No.</p></p><p><p>In this example, the type returned by Database.Open() is dynamic. It doesn’t have a Users property, but when that property is referenced on it, it returns a new instance of a DynamicTable type, again as dynamic. That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters. The FindBy<em> methods will only return one record; there are FindAllBy</em> methods which return result sets. This approach is used by the Ruby/Rails ActiveRecord library; Ruby’s metaprogramming nature encourages stuff like this.</p><footer><strong>Mark Rendle <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data">http://blog.markrendle.net/2010/08/05/introducing-simple-data</a> Introducing Simple.Data</strong></footer></blockquote></p>

<p>Just read that sentence once again&hellip;</p>

<p><em>That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters.</em></p>

<p>This sounds like crazy awesome magic and I need to understand it!</p>

<h2>How magic works?</h2>

<p>To find out how the magic worked, I downloaded the source code from github and started to poke around the code. The rest of the article explains what I got out of this experiment.</p>

<!--more-->


<p></p>

<p>The sample project I created is sort of the skeleton of what Simple.Data does on the inside. This is not an attempt to reproduce or fully understand the library. I just wanted to understand how one can call a non-existing method on a class and what is happening behind the curtain that enables this at runtime.</p>

<pre><code class="csharp disecting the magic    ">  class Program
  {
    static void Main(string[] args)
    {
      var dyn = DynamicTest.GetDynamic();
      var user = dyn.Users.FindByEmail("someone@somewhere.com");
    }
  }
</code></pre>

<p>So, after poking around in the <a href="https://github.com/markrendle/Simple.Data">source code</a> of Simple.Data I realized that the magic happens by applying the <a href="http://msdn.microsoft.com/en-us/library/vstudio/dd264741.aspx">dynamic</a> keyword and DynamicObject.</p>

<pre><code class="csharp DynamicObject skeleton     ">  public class DynamicTest : DynamicObject
  {
    public static dynamic GetDynamic()
    {
      if (_instance == null)
      {
        _instance = new DynamicTest();
      }

      return _instance;
    }
  }
</code></pre>

<p>I created a class that derives from DynamicObject and a method that returns an instance of this object, but instead of a return type I added the dynamic keyword to the method signature. What this does effectively is that when compiling my simple test code, the compiler will not look for the declaration of a Users property. It knows that this will resolved at runtime.</p>

<p>Once running this code there will be a RuntimeBinderException exception thrown with the the following message:</p>

<pre><code>    Message='object' does not contain a definition for 'Users'
</code></pre>

<p>Now, we need to somehow create a Users property on the DynamicTest class. For this, we need to override the TryGetMember method of the DynamicObject and implement this behavior.</p>

<p>So, TryGetMember will just create and return an instance of an ObjectReference object. It has a parameter called binder that has information about the member that is called and an out parameter to pass back the result. The created object will be stored with binder.Name as key, so next time the same instance can be returned. This will represent the <strong>.User</strong> part of our dynamic call. But how will we handle the remaining method call?</p>

<pre><code class="csharp TryGetMember implementation ">    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
      result = GetOrAddDynamicReference(binder.Name);
      return true; 
    }

    private dynamic GetOrAddDynamicReference(string name)
    {
      return _members.GetOrAdd(name, new ObjectReference(name));
    }
</code></pre>

<p>ObjectReference is also derived from DynamicObject and it overrides the TryInvokeMember method to handle the remaining method call. Again, it receives a binder that contains information about the member that is being invoked, the parameters that is passed in and it has an out parameter that is used to pass back the result. What this method does is just simply prints out the method that is being invoked and its parameters.</p>

<pre><code class="csharp TryInvokeMember implementation">    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
      if (base.TryInvokeMember(binder, args, out result)) return true;

      try
      {
        Console.WriteLine("Called " + 
                          _name + "." + 
                          binder.Name + 
                          "(" + 
                          args.Aggregate((current, next) =&gt; current + ", " + next) + 
                          ")");

        result = "result";
        return true;
      } catch
      {
        throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
      }

      throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
    }
</code></pre>

<p>Now, that I better understand how all this works I realized that I am way behind with the new features of C#. I guess, I need to buy a book about the last version of the language, read it and learn a bit more as I am behind. Below is the full sample code that I created:</p>

<pre><code class="csharp full source code for dynamic test">using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DynamicTest
{
  class Program
  {
    static void Main(string[] args)
    {
      var dyn = DynamicTest.GetDynamic();
      var user = dyn.Users.FindByEmail("someone@somewhere.com");
    }
  }

  public class DynamicTest : DynamicObject
  {
    private readonly ConcurrentDictionary&lt;string, dynamic&gt; _members = new ConcurrentDictionary&lt;string, dynamic&gt;();

    private static DynamicTest _instance; 

    public static dynamic GetDynamic()
    {
      if (_instance == null)
      {
        _instance = new DynamicTest();
      }

      return _instance;
    }

    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
      result = GetOrAddDynamicReference(binder.Name);
      return true; 
    }

    private dynamic GetOrAddDynamicReference(string name)
    {
      return _members.GetOrAdd(name, new ObjectReference(name));
    }
  }

  public class ObjectReference : DynamicObject
  {
    private string _name;

    public ObjectReference(string name)
    {
      _name = name;
    }

    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
      if (base.TryInvokeMember(binder, args, out result)) return true;

      try
      {
        Console.WriteLine("Called " + 
                          _name + "." + 
                          binder.Name + 
                          "(" + 
                          args.Aggregate((current, next) =&gt; current + ", " + next) + 
                          ")");

        result = "result";
        return true;
      } catch
      {
        throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
      }

      throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
    }
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Xamarin iOS on Windows]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/03/exploring-xamarin-ios-on-windows/"/>
    <updated>2013-03-28T08:24:00+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/03/exploring-xamarin-ios-on-windows</id>
    <content type="html"><![CDATA[<p>Xamarin not so long ago released the version 2.0 of their product that allows all .NET developers to use C# and .NET libraries to code apps for iOS and Android. Better yet, it allows us to use our bellowed Visual Studio.NET to code for these platforms.</p>

<p>I love to try out new things, so I decide to figure out if it is really possible to create very basic application for iOS and for Android purely from Visual Studio.NET.</p>

<!--more-->


<p></p>

<p>The one thing I need to add is that I am without any knowledge of Objective-C or the iOS platform. I can construct the very basic HelloWorld app in XCode, but this is how far my iOS knowledge reaches. Regarding Android, I have zero knowledge of the platform and how to construct the HelloWorld app for the platform. Nevertheless, I give it a try and document my ups and downs creating these apps in vs.net.</p>

<h3>Creating a new project</h3>

<p>I installed the Xamarin environment and started up Visual Studio.NET 2012. Selected File | New Project and created the project.</p>

<p><img src="/images/xam_vs_001.png" title="&lsquo;New Project&rsquo; &lsquo;Creating new project for iOS in Visual Studio&rsquo;" ></p>

<p>In order to be able to use Visual Studio.NET with Xamarin, you need the Business version or you will need to start the 30 days trial. I opted for the second option.</p>

<p>But first begin the <a href="http://docs.xamarin.com/guides/cross-platform/getting_started/beginning_a_xamarin_trial">30 days trial</a>.</p>

<p><img src="/images/xam_vs_002.png" title="&lsquo;Starting the 30 days trial&rsquo; &lsquo;Starting the 30 days trial&rsquo;" ></p>

<p>After creating and logging in with the Xamarin account the 30 days trial starts and Visual Studio .NET restarts. It starts searching on the network for active OS X machines to be used as build machine. I have nothing like that on my network, so let’s close the dialog.</p>

<p><img src="/images/xam_vs_003.png" title="&lsquo;Searching for build machine&rsquo; &lsquo;Searching for build machine&rsquo;" ></p>

<p>I have no mac machine on the network currently so let’s choose <strong>Close</strong>.</p>

<p>// footnote???
Minor inconvenience is that you will need a live network connection for Xamarin software to check the license with the server and this can be problematic, if you are doing this while you are commuting without network.</p>

<h3>Dude, where is my design surface?</h3>

<p>I created my HelloWorld project and my limited iOS knowledge tells me that this point I need to open .xib or .nib file and start dragging controls onto the design surface. Looking through the project there are no .xib files to open. Searching through the Add New Item dialog yields no result as well.</p>

<p>Looking through the guide I find the following section:</p>

<p><blockquote><p>Storyboard and XIB files (used by Apple’s Interface Builder for GUI design) cannot currently be edited in Visual Studio. If you create an application from a Storyboard template (or a template that includes XIB files) then you’ll have to switch to the Mac and open the entire solution in Xamarin Studio. From within Xamarin Studio, double-click on XIBs or Storyboards to open and edit them. This includes adding a new item after the project is created, from the following options:</p></p><p><p>Working with Storyboards and XIBs</p></p><p><p>Editing storyboard and XIB files must be done on OS X with Interface Builder. The Xamarin.iOS plug-in for Visual Studio does not provide any support for this.</p><footer><strong>Xamarin <a href="http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio">http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio</a> Introduction to Xamarin iOS for Visual Studio</strong></footer></blockquote></p>

<p><a href="http://xamarin.com/guide/">Xamarin Guide</a> explains the alternatives in greater details:</p>

<p><blockquote><p>Xamarin.iOS for Visual Studio comes with several simplified iOS application templates that eschew XIB and Storyboard files, giving developers the option of building their entire user interface in code.  That approach could be desirable for some developers on Windows who want to avoid Xcode and minimize their reliance on a Mac. Xamarin’s MonoTouch.Dialog library— which provides a simple, declarative API for building iOS user interface layouts in code—might prove especially useful for that particular audience.</p></p><p><p>Developers who still want to use XIB or Storyboard files can still use Xcode on Mac OS X in order to modify the layout. Fortunately, the high degree of interoperability between Xamarin Studio and Visual Studio makes that a relatively straightforward process. A developer can do most of their development with Visual Studio on Windows and jump over to Xamarin Studio on a Mac while working on user interface design. The same exact project and solution files can be used in both environments.</p><footer><strong>Xamarin <a href="http://xamarin.com/guide/">http://xamarin.com/guide/</a> Xamarin Guide</strong></footer></blockquote></p>

<p>So you can get rid of XIB if you like and define your UI entirely using the dialog library or you can use XiB but then you need a Mac too.</p>

<h3>Rebooting to OS X</h3>

<p>I decided to stay with the path I know and restarted my macbook to boot OS X. This way I can use the xib approach for now and once I finished I will be going back to Visual Studio.</p>

<p><img src="/images/xam_vs_004.png" title="&lsquo;Xamarin Studio on OS X&rsquo; &lsquo;Looking at Xamarin Studio in OS X&rsquo;" ></p>

<p>Opening the project in Xamarin Studio I realized that I have no idea how to integrate a new storyboard to my project, so I opted to create a brand new project that has a xib file included. It is not a very high-tech move, but sometimes it pays to create your project from scratch.</p>

<p><img src="/images/xam_vs_005.png" title="&lsquo;Creating a new project&rsquo; &lsquo;Creating a new project&rsquo;" ></p>

<h3>Creating the UI in XCode</h3>

<p>Once the new project is created, I can open the xib file in XCode to add my controls and create actions and outlets for these controls. I started with dragging a label and a button onto the design surface.</p>

<p><img src="/images/xam_vs_006.png" title="&lsquo;Dragging the controls in XCode&rsquo; &lsquo;Dragging the controls in XCode&rsquo;" ></p>

<p>Selecting the code icon in XCode will bring in the source control editor. I now can control-drag – clicking on the control while dragging the control to the source code editor – to create my outlet for the Label and the action for my button.</p>

<p><img src="/images/xam_vs_007.png" title="&lsquo;Press this button to bring in the source code editor in XCode&rsquo; &lsquo;Press this button to bring in the source code editor in XCode&rsquo;" ></p>

<p>Pressing control and dragging the button to the source code editor will bring up a little window that allows me to set up the action for my button. I changed the connection type to action and name it btnPRessed.</p>

<p><img src="/images/xam_vs_008.png" title="&lsquo;Creating an action for the button in XCode&rsquo; &lsquo;Creating an action for the button in XCode&rsquo;" ></p>

<p>I do the same control dragging for the labe, but this time the connection type is set to outlet and the name lblText.</p>

<p><img src="/images/xam_vs_009.png" title="&lsquo;Creating an outlet for the label in XCode&rsquo; &lsquo;Creating an outlet for the label in XCode&rsquo;" ></p>

<p>The last important step is to make sure that you save the .xib file. I forget this most of the time annd the result is that these changes will not be generated in the code behind for the view controlller. Back in Xamarin Studio, I can confirm by looking at the codebehind for the view controller that the outlet and action for my controlls are showing up in the code. Let’s go back to Visual Studio.NET.</p>

<p><img src="/images/xam_vs_010.png" title="&lsquo;Codebehind for the ViewController in Xamarin Studio shows that the constructs for my controlls are generated&rsquo; &lsquo;Codebehind for the ViewController in Xamarin Studio&rsquo;" ></p>

<h3>Back to Visual Studio</h3>

<p>All I have left is to define the event handler – or action method if you like for my button and set the content of the label. The action is defined as a partial method in the code-behind, so I need to provide the implementation for my method. With this I am finished constructing my very basic application for iOS. All is left to test it on a Mac in an emulator to see if it works.</p>

<p><img src="/images/xam_vs_011.png" title="&lsquo;Partial method for the button in Visual Studio&rsquo; &lsquo;Partial method for the button in Visual Studio&rsquo;" ></p>

<h3>Conclusion</h3>

<p>Xamarin version 2.0 brings the possibility to develop for iOS from Visual Studio.NET for the first time. This is a very welcome change, but it has its own weakness. One is that for creating the UI you will need a Mac computer or you will need to code your whole UI in code. This can be addressed by creating a tool that allows us developers to do UI creation on Windows. Hopefully this will come in the next version. The other area that for testing and debugging you will not be able to live without a mac computer. Once again having a cheap mac computer on the network solves this problem. I have no experience how convenient the debugging, but I will try this soon.</p>

<p>Overall, I am very happy with the new version and the fact that they allow free use with limitation makes me very happy and probably I will invest my time to learn the technology. Well done, Xamarin!</p>
]]></content>
  </entry>
  
</feed>
