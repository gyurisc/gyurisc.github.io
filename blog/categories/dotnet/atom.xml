<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dotnet | littlebigtomatoes]]></title>
  <link href="http://www.littlebigtomatoes.com/blog/categories/dotnet/atom.xml" rel="self"/>
  <link href="http://www.littlebigtomatoes.com/"/>
  <updated>2018-07-20T10:08:33+02:00</updated>
  <id>http://www.littlebigtomatoes.com/</id>
  <author>
    <name><![CDATA[Krisztian Gyuris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Generate Typescript Classes From C# Like a Pro]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/06/how-to-generate-typescript-classes-from-c-number-like-a-pro/"/>
    <updated>2016-06-13T13:29:09+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/06/how-to-generate-typescript-classes-from-c-number-like-a-pro</id>
    <content type="html"><![CDATA[<p>I will teach you how to create Typescript classes from your existing C# classes effortlessly like a pro within 30 seconds.</p>

<!-- more -->


<p>Sometimes, you will need to create typescript classes where the class already exists in C#. This is super boring and tedious, but here is a cool plugin to help you.</p>

<p>First you will need to install this plugin called <a href="https://visualstudiogallery.msdn.microsoft.com/eb0887f8-3ac1-434a-b50b-f0112f1572f7">TypescriptSyntaxPaste</a> in Visual Studio.NET 2015.</p>

<p><img src="/images/InstallTypescriptPaste_001.gif" title="&lsquo;Install TypeScriptSyntaxPaste plugin&rsquo; &lsquo;Animated git showing how to install TypeScriptSyntaxPage plugin in Visual Studio.NET 2015&rsquo;" ></p>

<h2>Installing it</h2>

<ul>
<li>Go to Tools | Extensions in Visual Studio .NET 2015.</li>
<li>Select Visual Studio Gallery under the Online category.</li>
<li>Search for TypescriptSyntaxPaste in the search folder.</li>
<li>Find the plugin in the results pane and click on Download.</li>
<li>Then click Install.</li>
<li>Restart Visual Studio.</li>
</ul>


<h2>Using it</h2>

<p>After installing the plugin this is how you use it:</p>

<p><img src="/images/UseTypeScriptPaste_002.gif" title="&lsquo;Using TypeScriptSyntaxPaste plugin&rsquo; &lsquo;Animated git showing how to use TypeScriptSyntaxPage plugin in Visual Studio.NET 2015&rsquo;" ></p>

<ul>
<li>Select your C# class and press Ctrl-C to copy.</li>
<li>Open a Typescript file (.ts or .tsx extension will work).</li>
<li>Paste the code.</li>
<li>Observe the results.</li>
</ul>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serializing Empty IEnumerable<T> With protobuf.net]]></title>
    <link href="http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net/"/>
    <updated>2015-10-30T17:06:13+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net</id>
    <content type="html"><![CDATA[<p>I am recently trying to use protobuf.net for serializing objects for network communication in a .net application. Protobuf is a great format for sending data. Protobuf tries to be very frugal to save bandwidth. However, this causes some unexpected side effects when using it with .NET.</p>

<!-- more -->


<p>For example, If there is a collection serialized and the collection count was zero, then the serializer is going to write out null and this collection will be deserialized as null on the other end.</p>

<p>This is easy to fix when you have only a few classes that holding your models, but can be a huge problem when you have a very large number of classes that you are trying to serialize and the previously used serializer was always deserializing an empty collection to an empty collection.</p>

<p>To solve this, we need extra wrapper class and within this wrapper class it is possible to detect if the underlying generic type is a IEnumerable&lt;T&gt; and create code to initialize the data member as an empty collection if needed.</p>

<p>The code below demonstrates how to use this technique.</p>

<pre><code class="csharp creating empty collection in data wrapper ">    public class DataWrapper&lt;T&gt;
    {    
        public T Data { get; set; }
        public DataWrapper()
        {
            Type dataType = typeof(T);

            // Protobuf deserializes empty collections as null in order to combat this we create an empty collection by default
            if (dataType.IsGenericType &amp;&amp; dataType.GetGenericTypeDefinition() == typeof(IEnumerable&lt;&gt;))
            {
                Type underlyingType = entityType.GetGenericArguments()[0];

                var listType = typeof(List&lt;&gt;);
                var concreteType = listType.MakeGenericType(underlyingType);

                Data = (TEntity)Activator.CreateInstance(concreteType);
            }
            else
            {
                Data = default(T);
            }
         }
     }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple.Data and Dynamic Calls Are Awesome]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome/"/>
    <updated>2013-06-17T11:59:00+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome</id>
    <content type="html"><![CDATA[<p>Couple of weeks ago I started to look into different open source packages on the .NET platform such as <a href="http://nancyfx.org/">Nancy</a> and <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Simple.Data</a>. They all looked very cool, but one paragraph in an article called <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Introducing Simple.Data</a> - explaining how the code snippet below works - caught my attention:</p>

<pre><code class="csharp getting data from db ">var db = Database.Open(); // Connection specified in config.
var user = db.Users.FindByNameAndPassword(name, password);
</code></pre>

<p><blockquote><p>That’s pretty neat, right? So, did we have to generate the Database class and a bunch of table classes to make this work?</p></p><p><p>No.</p></p><p><p>In this example, the type returned by Database.Open() is dynamic. It doesn’t have a Users property, but when that property is referenced on it, it returns a new instance of a DynamicTable type, again as dynamic. That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters. The FindBy<em> methods will only return one record; there are FindAllBy</em> methods which return result sets. This approach is used by the Ruby/Rails ActiveRecord library; Ruby’s metaprogramming nature encourages stuff like this.</p><footer><strong>Mark Rendle <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data">http://blog.markrendle.net/2010/08/05/introducing-simple-data</a> Introducing Simple.Data</strong></footer></blockquote></p>

<p>Just read that sentence once again&hellip;</p>

<p><em>That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters.</em></p>

<p>This sounds like crazy awesome magic and I need to understand it!</p>

<h2>How magic works?</h2>

<p>To find out how the magic worked, I downloaded the source code from github and started to poke around the code. The rest of the article explains what I got out of this experiment.</p>

<!--more-->


<p></p>

<p>The sample project I created is sort of the skeleton of what Simple.Data does on the inside. This is not an attempt to reproduce or fully understand the library. I just wanted to understand how one can call a non-existing method on a class and what is happening behind the curtain that enables this at runtime.</p>

<pre><code class="csharp disecting the magic    ">  class Program
  {
    static void Main(string[] args)
    {
      var dyn = DynamicTest.GetDynamic();
      var user = dyn.Users.FindByEmail("someone@somewhere.com");
    }
  }
</code></pre>

<p>So, after poking around in the <a href="https://github.com/markrendle/Simple.Data">source code</a> of Simple.Data I realized that the magic happens by applying the <a href="http://msdn.microsoft.com/en-us/library/vstudio/dd264741.aspx">dynamic</a> keyword and DynamicObject.</p>

<pre><code class="csharp DynamicObject skeleton     ">  public class DynamicTest : DynamicObject
  {
    public static dynamic GetDynamic()
    {
      if (_instance == null)
      {
        _instance = new DynamicTest();
      }

      return _instance;
    }
  }
</code></pre>

<p>I created a class that derives from DynamicObject and a method that returns an instance of this object, but instead of a return type I added the dynamic keyword to the method signature. What this does effectively is that when compiling my simple test code, the compiler will not look for the declaration of a Users property. It knows that this will resolved at runtime.</p>

<p>Once running this code there will be a RuntimeBinderException exception thrown with the the following message:</p>

<pre><code>    Message='object' does not contain a definition for 'Users'
</code></pre>

<p>Now, we need to somehow create a Users property on the DynamicTest class. For this, we need to override the TryGetMember method of the DynamicObject and implement this behavior.</p>

<p>So, TryGetMember will just create and return an instance of an ObjectReference object. It has a parameter called binder that has information about the member that is called and an out parameter to pass back the result. The created object will be stored with binder.Name as key, so next time the same instance can be returned. This will represent the <strong>.User</strong> part of our dynamic call. But how will we handle the remaining method call?</p>

<pre><code class="csharp TryGetMember implementation ">    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
      result = GetOrAddDynamicReference(binder.Name);
      return true; 
    }

    private dynamic GetOrAddDynamicReference(string name)
    {
      return _members.GetOrAdd(name, new ObjectReference(name));
    }
</code></pre>

<p>ObjectReference is also derived from DynamicObject and it overrides the TryInvokeMember method to handle the remaining method call. Again, it receives a binder that contains information about the member that is being invoked, the parameters that is passed in and it has an out parameter that is used to pass back the result. What this method does is just simply prints out the method that is being invoked and its parameters.</p>

<pre><code class="csharp TryInvokeMember implementation">    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
      if (base.TryInvokeMember(binder, args, out result)) return true;

      try
      {
        Console.WriteLine("Called " + 
                          _name + "." + 
                          binder.Name + 
                          "(" + 
                          args.Aggregate((current, next) =&gt; current + ", " + next) + 
                          ")");

        result = "result";
        return true;
      } catch
      {
        throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
      }

      throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
    }
</code></pre>

<p>Now, that I better understand how all this works I realized that I am way behind with the new features of C#. I guess, I need to buy a book about the last version of the language, read it and learn a bit more as I am behind. Below is the full sample code that I created:</p>

<pre><code class="csharp full source code for dynamic test">using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DynamicTest
{
  class Program
  {
    static void Main(string[] args)
    {
      var dyn = DynamicTest.GetDynamic();
      var user = dyn.Users.FindByEmail("someone@somewhere.com");
    }
  }

  public class DynamicTest : DynamicObject
  {
    private readonly ConcurrentDictionary&lt;string, dynamic&gt; _members = new ConcurrentDictionary&lt;string, dynamic&gt;();

    private static DynamicTest _instance; 

    public static dynamic GetDynamic()
    {
      if (_instance == null)
      {
        _instance = new DynamicTest();
      }

      return _instance;
    }

    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
      result = GetOrAddDynamicReference(binder.Name);
      return true; 
    }

    private dynamic GetOrAddDynamicReference(string name)
    {
      return _members.GetOrAdd(name, new ObjectReference(name));
    }
  }

  public class ObjectReference : DynamicObject
  {
    private string _name;

    public ObjectReference(string name)
    {
      _name = name;
    }

    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
      if (base.TryInvokeMember(binder, args, out result)) return true;

      try
      {
        Console.WriteLine("Called " + 
                          _name + "." + 
                          binder.Name + 
                          "(" + 
                          args.Aggregate((current, next) =&gt; current + ", " + next) + 
                          ")");

        result = "result";
        return true;
      } catch
      {
        throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
      }

      throw new InvalidOperationException(string.Format("Method {0} not recognized", binder.Name));
    }
  }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
