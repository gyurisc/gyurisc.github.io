<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[littlebigtomatoes]]></title>
  <link href="http://www.littlebigtomatoes.com/atom.xml" rel="self"/>
  <link href="http://www.littlebigtomatoes.com/"/>
  <updated>2018-07-25T09:04:14+02:00</updated>
  <id>http://www.littlebigtomatoes.com/</id>
  <author>
    <name><![CDATA[Krisztian Gyuris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meeting Heuristics]]></title>
    <link href="http://www.littlebigtomatoes.com/2018/07/meeting-heuristics/"/>
    <updated>2018-07-20T09:19:26+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2018/07/meeting-heuristics</id>
    <content type="html"><![CDATA[<p>This is a collection of heuristics for decinding on meetings. Found it via twitter from <a href="https://fs.blog/about/">Shane Parrish</a>. I subscribed to both of his <a href="https://fs.blog/blog/">blog</a> and twitter <a href="https://twitter.com/farnamstreet">@farnamstreet</a>. He is putting out incredible content on everyday wisdom.</p>

<p>Filling this for myself for future meetings:</p>

<ol>
<li>If you wouldn’t do it right now, say no.</li>
<li>Say no to everything outside of work hours you wouldn’t call your partner and bail on dinner for.</li>
<li>Say no to all recurring meetings with the exception of ones from your boss if you have one. Tell people you’ll opt-in on a per-agenda basis.</li>
<li>Cut all meetings in &frac12;</li>
<li>If you’re in a meeting and it’s clearly pointless, politely excuse yourself.</li>
<li>Keep an internal calculation of what your time is worth. Raise this every year.</li>
<li>If you&rsquo;re going for the drink, don&rsquo;t go.</li>
<li>If you&rsquo;re the smartest person in the room, you&rsquo;re in the wrong meeting.</li>
<li>Even if you can&rsquo;t get out of a meeting, rather than sit there an be bored or make a grocery list, become a detective and see what you can learn from/about everyone else in the meeting.</li>
<li>If everyone is on their phone or laptop at the meeting, leave. The decision has already been made.</li>
<li>If you&rsquo;re talking to signal how smart you are just shut up.</li>
<li>If you&rsquo;re going to &ldquo;add value&rdquo; to someone else&rsquo;s idea, just skip the meeting. That type of stuff is best-done one-on-one and not in a group setting where you reduce the motivation of the other person. (See signally how smart you are (11) and shut up.)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working Backwards]]></title>
    <link href="http://www.littlebigtomatoes.com/2017/09/working-backwards/"/>
    <updated>2017-09-28T20:44:15+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2017/09/working-backwards</id>
    <content type="html"><![CDATA[<blockquote><p>What&#8217;s your advice for indie hackers who are just starting out?</p><p>If you&#8217;re struggling to find The Product Idea — start working on shit even before you have one. Work backwards. Come up with a brand name. Start designing a website, then actually launch a website and start blogging about your journey. Build backlinks, work on SEO, build a personal brand, establish yourself as an expert, make connections, speak at conferences… It&#8217;s not the lack of ideas that holds you back; it&#8217;s procrastination.</p><footer><strong>Indiehackers</strong> <cite><a href='https://www.indiehackers.com/businesses/jitbit-software'>www.indiehackers.com/businesses/&hellip;</a></cite></footer></blockquote>


<p>So true&hellip; :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disabling Captive Portal Check in Android]]></title>
    <link href="http://www.littlebigtomatoes.com/2017/02/disabling-captive-portal-check-in-android/"/>
    <updated>2017-02-11T19:44:15+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2017/02/disabling-captive-portal-check-in-android</id>
    <content type="html"><![CDATA[<p>I recently had an issue with an Android phone that kept disconnecting from the wifi network after a certain period.
The wifi was configured to do a captive portal style authentication check, showing me a webpage after connection that asked me to authenticate myself in order to use the network.
When not authenticating for a certain period of time the Android phone disconnected from the wireless network causing me to wonder what is happening.</p>

<p>It seems that this is the default behavior of Android and this is how you can disable this behavior:</p>

<ul>
<li> First download and install <strong>adb</strong> on your machine.
 <a href="https://developer.android.com/studio/releases/platform-tools.html">SDK Platform Tools from Google</a></li>
<li> Extract the download and navigate the the folder where the adb executable located.</li>
<li> Connect your Android phone to your machine with the USB cable</li>
<li> Then launch the adb shell</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   adb shell
</span></code></pre></td></tr></table></div></figure>


<ul>
<li> Type the following command to turn off captive portal check</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>settings put global captive_portal_detection_enabled <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
   - Type to see if the value of the configuration key is 0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>settings get global captive_portal_detection_enabled
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Pandas]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/09/playing-with-pandas/"/>
    <updated>2016-09-26T11:58:11+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/09/playing-with-pandas</id>
    <content type="html"><![CDATA[<p>This is the third part of the articles I am writing about my little project I am working on. In part1, I created a web scraper to get the data I needed. In part 2, I added support to save the collected data to a mongodb database. Now in this part, I will look into how to clean up and add new features (columns) to the collected data to make it more suitable for analysis.</p>

<p>My primary motivation here is to learn new technologies as I progress, so my baby steps may not be the state of art in this particular area and all tips and tricks or corrections are welcome.</p>

<p>For this project I am using python and each day I love it more and more. There are some cool libraries for python such as pandas that will be used. There are some col tools such as python notebooks that will be also used.</p>

<!--more-->


<p></p>

<p>For starts, make sure that you have jupiter notebook installed on your machine and then start <a href="http://jupyter.org/">Jupyter Notebooks</a> from the git repo folder.</p>

<figure class='code'><figcaption><span>installing and starting jupiter notebook </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install jupiter
</span><span class='line'><span class="nb">cd</span> /path/to/stackjobs
</span><span class='line'>jupiter notebooks
</span></code></pre></td></tr></table></div></figure>


<p>With this command, we started the iPython (Jupyter) notebooks and a new browser will be opened. Click on the <a href="https://github.com/gyurisc/stackjobs/blob/master/notebooks/Enhancing%20and%20Extending%20data%20with%20Pandas%20.ipynb">Enhancing and Extending data with Pandas</a> notebook to see and run the code that this article with describe. Also the <a href="https://github.com/gyurisc/stackjobs/blob/master/enhance_data_with_pandas.py">enhance_data_with_pandas.py</a> file contains the same code, so it can be run without iptyhon notebook.</p>

<h2>Exploring data with pandas</h2>

<p>First of all we need to import some libraries and make some changes to how the data is printed out.</p>

<p>The changes in the display options e.g display.max_columns and display.max_rows are need in order for me to see the whole data when printed in the notebook and not just a few lines. Feel free to comment it out…</p>

<figure class='code'><figcaption><span>importing libraries and setting options and then reading the data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Let&#39;s change how printing the series works. I need to see all elements in the Series </span>
</span><span class='line'><span class="c"># source: http://stackoverflow.com/questions/19124601/is-there-a-way-to-pretty-print-the-entire-pandas-series-dataframe</span>
</span><span class='line'><span class="n">pd</span><span class="o">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">&#39;display.max_columns&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="n">pd</span><span class="o">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">&#39;display.max_rows&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jobs</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">&#39;data/stackoverflow_jobs.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, there are three calls to see what kind of data we loaded into our <em>jobs</em> data frame. We print out the columns, the types of the columns and some generic numerical data describing the dataset loaded. In the last one, the most important is the count that is telling us how many rows of data we loaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">columns</span> <span class="c"># just show the columns </span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">dtypes</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span> <span class="c"># show me the row count</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also print out the first and last few lines of the data, to have a look what we have using the <em>tail()</em> and <em>head()</em> method calls.</p>

<figure class='code'><figcaption><span>display the head and tail of the data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Working with Salary</h2>

<p>In our jobs data, we have the <em>salary</em> column that may or may not contains the salary is offered by the company for a particular position. When we have missing values in that column that can cause issues for further processing, so let’s replace the NA values with empty strings.</p>

<figure class='code'><figcaption><span>Replacing NA values with empty strings in the salary column</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">jobs</span><span class="o">.</span><span class="n">salary</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Next, we will extract the information, if the given position offers equity or not and store it in a new column called <em>equity</em>.</p>

<figure class='code'><figcaption><span>Extracting equity</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;equity&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">[</span><span class="s">&#39;salary&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Provides Equity&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Next, we will move the salary data to a new series object and remove the <em>Provides Equity</em> in order to make it easier to extract the other values. The reason for this is that I would like to leave the other columns as they were originally and do the needed modifications in the new columns or in some temp variables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">salary</span> <span class="o">=</span> <span class="n">jobs</span><span class="o">.</span><span class="n">salary</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;Provides Equity&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we removed the <em>Provides Equity</em> from the salary information our data is either an empty string or contains the currency information and the low high figure of the salary information. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">€</span><span class="mi">50</span><span class="p">,</span><span class="mo">000</span> <span class="o">-</span> <span class="mi">71</span><span class="p">,</span><span class="mo">000</span>
</span><span class='line'><span class="err">£</span><span class="mi">35</span><span class="p">,</span><span class="mo">000</span> <span class="o">-</span> <span class="mi">65</span><span class="p">,</span><span class="mo">000</span>
</span><span class='line'><span class="err">$</span><span class="mi">65</span><span class="p">,</span><span class="mo">000</span> <span class="o">-</span> <span class="mi">125</span><span class="p">,</span><span class="mo">000</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This information will be extracted using regular expression and captured in different columns. For the rows with empty values, it is recommended to provide a default value. Empty string for the currency and zero for the low-high figure.</p>

<p>Then we map back the new information to the jobs data frame.</p>

<figure class='code'><figcaption><span>extracting and capturing currency and low-high figure. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># salary = jobs.salary</span>
</span><span class='line'><span class="n">salary</span> <span class="o">=</span> <span class="n">jobs</span><span class="o">.</span><span class="n">salary</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;Provides Equity&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">sal</span> <span class="o">=</span> <span class="n">salary</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="s">&#39;(?P&lt;currency&gt;[^\d]*)(?P&lt;number_low&gt;[\d,]+) - (?P&lt;number_high&gt;[\d,]+$)&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sal</span><span class="o">.</span><span class="n">number_low</span> <span class="o">=</span> <span class="n">sal</span><span class="o">.</span><span class="n">number_low</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">sal</span><span class="o">.</span><span class="n">number_high</span> <span class="o">=</span> <span class="n">sal</span><span class="o">.</span><span class="n">number_high</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">sal</span><span class="o">.</span><span class="n">currency</span> <span class="o">=</span> <span class="n">sal</span><span class="o">.</span><span class="n">currency</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># mapping the new columns back to the original data frame </span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;currency&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sal</span><span class="o">.</span><span class="n">currency</span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;salary_low&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sal</span><span class="o">.</span><span class="n">number_low</span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;salary_high&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sal</span><span class="o">.</span><span class="n">number_high</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixing up Location</h2>

<p>We will also need better location information, so we can do analysis by countries and cities. For this we need to extract country, state and city out of location column.
But first let&rsquo;s remove the na values from location column. Then use a lambda to split the comma separated location value into individual fields.
Finally, rename the columns to city, location_1 and location_2. The reason for this is that the content of location can be different for different countries.</p>

<figure class='code'><figcaption><span>extracting and capturing currency and low-high figure. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">London</span><span class="p">,</span><span class="n">UK</span>
</span><span class='line'><span class="n">New</span> <span class="n">York</span><span class="p">,</span><span class="n">NY</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In the first expression the second member is a country and in the second expression it is a state, so we need to handle these differently.</p>

<figure class='code'><figcaption><span>split the location </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">jobs</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span> <span class="c"># sometimes we have nothing in the location field. </span>
</span><span class='line'>
</span><span class='line'><span class="n">location_split</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)])</span>
</span><span class='line'><span class="n">locations</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">[</span><span class="s">&#39;location&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">location_split</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="s">&#39;city&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="s">&#39;location_1&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s">&#39;location_2&#39;</span><span class="p">},</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Fixing US locations</h3>

<p>So it seems that US locations are special. They are in the form of city, state, we need this to be in form of city, state, country, so let&rsquo;s fix this first.
If we have a US state in <em>location1 column then put US in </em>location2.</p>

<figure class='code'><figcaption><span>Fixing US States </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">us_states</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;AL&quot;</span><span class="p">,</span> <span class="s">&quot;AK&quot;</span><span class="p">,</span> <span class="s">&quot;AZ&quot;</span><span class="p">,</span> <span class="s">&quot;AR&quot;</span><span class="p">,</span> <span class="s">&quot;CA&quot;</span><span class="p">,</span> <span class="s">&quot;CO&quot;</span><span class="p">,</span> <span class="s">&quot;CT&quot;</span><span class="p">,</span> <span class="s">&quot;DC&quot;</span><span class="p">,</span> <span class="s">&quot;DE&quot;</span><span class="p">,</span> <span class="s">&quot;FL&quot;</span><span class="p">,</span> <span class="s">&quot;GA&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;HI&quot;</span><span class="p">,</span> <span class="s">&quot;ID&quot;</span><span class="p">,</span> <span class="s">&quot;IL&quot;</span><span class="p">,</span> <span class="s">&quot;IN&quot;</span><span class="p">,</span> <span class="s">&quot;IA&quot;</span><span class="p">,</span> <span class="s">&quot;KS&quot;</span><span class="p">,</span> <span class="s">&quot;KY&quot;</span><span class="p">,</span> <span class="s">&quot;LA&quot;</span><span class="p">,</span> <span class="s">&quot;ME&quot;</span><span class="p">,</span> <span class="s">&quot;MD&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;MA&quot;</span><span class="p">,</span> <span class="s">&quot;MI&quot;</span><span class="p">,</span> <span class="s">&quot;MN&quot;</span><span class="p">,</span> <span class="s">&quot;MS&quot;</span><span class="p">,</span> <span class="s">&quot;MO&quot;</span><span class="p">,</span> <span class="s">&quot;MT&quot;</span><span class="p">,</span> <span class="s">&quot;NE&quot;</span><span class="p">,</span> <span class="s">&quot;NV&quot;</span><span class="p">,</span> <span class="s">&quot;NH&quot;</span><span class="p">,</span> <span class="s">&quot;NJ&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;NM&quot;</span><span class="p">,</span> <span class="s">&quot;NY&quot;</span><span class="p">,</span> <span class="s">&quot;NC&quot;</span><span class="p">,</span> <span class="s">&quot;ND&quot;</span><span class="p">,</span> <span class="s">&quot;OH&quot;</span><span class="p">,</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span> <span class="s">&quot;OR&quot;</span><span class="p">,</span> <span class="s">&quot;PA&quot;</span><span class="p">,</span> <span class="s">&quot;RI&quot;</span><span class="p">,</span> <span class="s">&quot;SC&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;SD&quot;</span><span class="p">,</span> <span class="s">&quot;TN&quot;</span><span class="p">,</span> <span class="s">&quot;TX&quot;</span><span class="p">,</span> <span class="s">&quot;UT&quot;</span><span class="p">,</span> <span class="s">&quot;VT&quot;</span><span class="p">,</span> <span class="s">&quot;VA&quot;</span><span class="p">,</span> <span class="s">&quot;WA&quot;</span><span class="p">,</span> <span class="s">&quot;WV&quot;</span><span class="p">,</span> <span class="s">&quot;WI&quot;</span><span class="p">,</span> <span class="s">&quot;WY&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_1&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_1&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_1&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">us_states</span><span class="p">),</span><span class="s">&#39;location_2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;US&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Filling the state and country columns</h3>

<p>We are now ready to put back the city, state and country information in our original data frame.
Here is the logic, If in a row location_2 is null then location_1 contains the country of that location, if location_2 is not empty then location_2 is going to be the country and location_1 will contain the state.</p>

<figure class='code'><figcaption><span>creating city, stat and country column</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># if location_2 is null then location_1 column has the country </span>
</span><span class='line'><span class="c"># if location_2 is not null then location_2 has the country and location_1 contains the state </span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_2&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isnull</span><span class="p">(),</span> <span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_1&#39;</span><span class="p">],</span> <span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_2&#39;</span><span class="p">])</span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_2&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">notnull</span><span class="p">(),</span> <span class="n">locations</span><span class="p">[</span><span class="s">&#39;location_1&#39;</span><span class="p">],</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;city&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">locations</span><span class="p">[</span><span class="s">&#39;city&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># filling na for country </span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">country</span> <span class="o">=</span> <span class="n">jobs</span><span class="o">.</span><span class="n">country</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># stripping spaces from new columns</span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;city&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">[</span><span class="s">&#39;city&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can see what countries are posting the most jobs. It seems that the US, Deutschland, Germany and the UK are the top countries. But wait. Aren&rsquo;t Germany and Deutschland are the same country? Let&rsquo;s fix this and some other countries with native names.</p>

<figure class='code'><figcaption><span>replacing local country names with their english names</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># replacing some of the country names with their english version </span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Deutschland&#39;</span><span class="p">),</span><span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Germany&#39;</span> <span class="c"># Deutschland -&gt; Germany</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Österreich&#39;</span><span class="p">),</span><span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Austria&#39;</span> <span class="c"># Österreich -&gt; Austria</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Suisse&#39;</span><span class="p">),</span> <span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Switzerland&#39;</span> <span class="c"># Suisse -&gt; Switzerland</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Schweiz&#39;</span><span class="p">),</span> <span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Switzerland&#39;</span> <span class="c"># Schweiz -&gt; Switzerland</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Espagne&#39;</span><span class="p">),</span> <span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Spain&#39;</span> <span class="c"># Espagne -&gt; Spain</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;République tchèque&#39;</span><span class="p">),</span> <span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Czech Republic&#39;</span> <span class="c"># République tchèque -&gt; Czech Republic</span>
</span><span class='line'><span class="n">jobs</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="s">&#39;Niederlande&#39;</span><span class="p">),</span> <span class="s">&#39;country&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Netherlands&#39;</span> <span class="c"># Niederlande -&gt; Netherlands</span>
</span><span class='line'>
</span><span class='line'><span class="n">jobs</span><span class="p">[</span><span class="s">&#39;country&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we have a pretty neat table with data that we can do analytics on. In the next part, I will try to ask questions from  data and create some graphs to find out interesting stuff like:</p>

<ul>
<li>What countries has the most jobs?</li>
<li>What cities has the most jobs?</li>
<li>What technologies are the most popular?</li>
<li>What technologies are paying the most?</li>
</ul>


<p>Coming soon…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Handsontable]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/08/getting-started-with-handsontable/"/>
    <updated>2016-08-26T13:01:03+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/08/getting-started-with-handsontable</id>
    <content type="html"><![CDATA[<p>I am looking for a way to be able to display and manipulate tabular data on a webpage. For this, I decided to evaluate a few javascript based libraries and see how they can be used.</p>

<p>The first such library is called <a href="https://handsontable.com/">handsontable</a>. Handsontable is a Javascript/HTML5 Spreadsheet library for developers. It seems that Handsontable is more for building Excel like user interfaces than just simple data grid control.</p>

<p>So let’s look how easy to build a minimal example using with <a href="https://handsontable.com/">handsontable</a>…</p>

<p><img src="http://www.littlebigtomatoes.com/images/handsontable_minimal.png" title="‘Handsontable Demo’ ‘Handsontable demo page'" ></p>

<!--more-->


<p></p>

<p>The main web-page describes this library as:</p>

<blockquote><p>Handsontable is a composite spreadsheet component for apps and websites. It is written in JavaScript and not constrained by any external framework. Handsontable can be easily modified or extended with custom plugins. It also binds to any source using the JSON format and is capable of handling a large amount of data. You can easily do all CRUD operations and provide end-users with an Excel-like experience.</p></blockquote>


<h3>Creating the minimal Handsontable page</h3>

<p>First of all, click to <a href="http://www.littlebigtomatoes.com/downloads/handsontable_sample.zip">download the source code</a> for the minimal handsontable sample.</p>

<p>The first file to be created is the <strong>index.html</strong></p>

<figure class='code'><figcaption><span>handsontable index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-capable&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-touch-fullscreen&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Handsontable Minimum Sample<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;assets/css/handsontable.full.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;table&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/handsontable.full.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>          <span class="c">&lt;!-- Placeholder to Initialize Handsontable --&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too complicated here. This is only a standard html page. The table will be rendered in the first called table <strong>div</strong> after the body.</p>

<figure class='code'><figcaption><span>handsontable div</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;table&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the header part, the css for handsontable is referenced and in the bottom part of the body, we referenced the script file needed for our table. I choose to include these files in the assets folder in the zip file, but it is possible to reference these files directly from handsontable.com as well by replacing the links like this:</p>

<p>For CSS use:</p>

<figure class='code'><figcaption><span>handsontable css reference </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;http://docs.handsontable.com/pro/bower_components/handsontable-pro/dist/handsontable.full.min.css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the script:</p>

<figure class='code'><figcaption><span>handsontable javascript reference </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://docs.handsontable.com/pro/bower_components/handsontable-pro/dist/handsontable.full.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part comes next in a separate script tag. We are going to get the data for the table and initialise how the table should look like.</p>

<figure class='code'><figcaption><span>initialising our table </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Apple Inc.&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;AAPL&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;108.03&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;89.47&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;123.82&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;12.62&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;0.57&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Amazon.com, Inc.&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;AMZN&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;757.25&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;466.25&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;773.75&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;188.83&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;-&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Tesla Motors Inc&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;TSLA&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;222.62&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;141.05&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;271.57&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;-&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;-&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Microsoft Corporation&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;MSFT&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;57.95&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;40.39&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;58.50&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;27.57&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;0.36&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">hTable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Handsontable</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">rowHeaders</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">colHeaders</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Company&#39;</span><span class="p">,</span> <span class="s1">&#39;Ticker&#39;</span><span class="p">,</span> <span class="s1">&#39;Price&#39;</span><span class="p">,</span> <span class="s1">&#39;52 Low&#39;</span><span class="p">,</span> <span class="s1">&#39;52 High&#39;</span><span class="p">,</span> <span class="s1">&#39;P/E&#39;</span><span class="p">,</span> <span class="s1">&#39;Dividend Yield&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">colWidths</span><span class="o">:</span> <span class="mi">120</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">rowHeights</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">autoRowSize</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">autoColSize</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>First, we create our data structure that we would like to display in our table.</p>

<p>Then, we get the placeholder div and call  the init function of the Handsontable library. In the init function, we pass the placeholder div and some other parameters like our data and the names of our columns.</p>

<p>This is really it. Could not be simpler, right?</p>

<h3>Some extras</h3>

<p>I would like to add the capability to be able to sort by column names. This is very easy, just pass two more parameters in the init function</p>

<figure class='code'><figcaption><span>Enabling column ordering </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">columnSorting</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'><span class="nx">sortIndicator</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I would like to be able to resize the columns of my table. Again, this is very easy:</p>

<figure class='code'><figcaption><span>Resizing columns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">manualRowResize</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'><span class="nx">manualColumnResize</span><span class="o">:</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>Handsontable seems like a very powerful library to build spreadsheet functionalities to your web application. It comes in two favours. The <a href="https://docs.handsontable.com/pro/1.5.1/tutorial-introduction.html">Pro</a> version will cost you money, but has really nice features, such as column filtering. The free version is open-source and as far as I understand you can use it however you see fit.</p>

<h3>Links</h3>

<p>This article will also server as a note for my future self, so here are the relevant links for this library:</p>

<ul>
<li><a href="https://docs.handsontable.com/pro/1.5.1/tutorial-introduction.html">Handsontable Documentation</a></li>
<li><a href="https://github.com/handsontable/handsontable">Handsontable on Github</a>.</li>
</ul>


<h3>Full index.html</h3>

<figure class='code'><figcaption><span>full index.html </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-capable&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-touch-fullscreen&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Handsontable Minimum Sample<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;assets/css/handsontable.full.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;table&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/handsontable.full.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Apple Inc.&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;AAPL&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;108.03&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;89.47&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;123.82&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;12.62&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;0.57&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Amazon.com, Inc.&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;AMZN&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;757.25&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;466.25&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;773.75&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;188.83&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;-&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Tesla Motors Inc&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;TSLA&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;222.62&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;141.05&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;271.57&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;-&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;-&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span><span class="nx">company</span><span class="o">:</span> <span class="s2">&quot;Microsoft Corporation&quot;</span><span class="p">,</span> <span class="nx">ticker</span><span class="o">:</span> <span class="s2">&quot;MSFT&quot;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="s2">&quot;57.95&quot;</span><span class="p">,</span> <span class="nx">low52</span><span class="o">:</span> <span class="s2">&quot;40.39&quot;</span><span class="p">,</span> <span class="nx">high52</span><span class="o">:</span> <span class="s2">&quot;58.50&quot;</span><span class="p">,</span> <span class="nx">pe</span><span class="o">:</span> <span class="s2">&quot;27.57&quot;</span><span class="p">,</span> <span class="k">yield</span><span class="o">:</span> <span class="s2">&quot;0.36&quot;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cols</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;company&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">140</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;ticker&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;low52&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;high52&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;pe&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span><span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">data</span><span class="o">:</span> <span class="s1">&#39;yield&#39;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;numeric&#39;</span><span class="p">,</span> <span class="nx">format</span><span class="o">:</span> <span class="s1">&#39;0.00&#39;</span><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">hTable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Handsontable</span><span class="p">(</span><span class="nx">table</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">columns</span><span class="o">:</span> <span class="nx">cols</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">rowHeaders</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">colHeaders</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Company&#39;</span><span class="p">,</span> <span class="s1">&#39;Ticker&#39;</span><span class="p">,</span> <span class="s1">&#39;Price&#39;</span><span class="p">,</span> <span class="s1">&#39;52 Low&#39;</span><span class="p">,</span> <span class="s1">&#39;52 High&#39;</span><span class="p">,</span> <span class="s1">&#39;P/E&#39;</span><span class="p">,</span> <span class="s1">&#39;Dividend Yield&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">colWidths</span><span class="o">:</span> <span class="mi">120</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">rowHeights</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">columnSorting</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">sortIndicator</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">autoRowSize</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">autoColSize</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping Stackoverflow Careers for Fun and Profit - Part 2]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/08/scraping-stackoverflow-careers-for-fun-and-profit-part-2/"/>
    <updated>2016-08-06T21:20:17+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/08/scraping-stackoverflow-careers-for-fun-and-profit-part-2</id>
    <content type="html"><![CDATA[<p>Let’s continue with our project. To summarise what we did in the <a href="http://littlebigtomatoes.com/2016/07/scraping-stackoverflow-careers-for-fun-and-profit/">first part</a>, we wrote a scraper in python using the <a href="http://scrapy.org">scrapy framework</a> that was capable of getting data from the stackoverflow job pages, but nothing else than that.</p>

<p>In this part, we will save the results to mongodb, make sure that we do not have duplicates and learn how to export the data we gathered&hellip;</p>

<!--more-->


<p></p>

<p>The source code for this project can be found in <a href="https://github.com/gyurisc/stackjobs">stackjobs repo</a> on github.</p>

<h3>Installing mongodb</h3>

<p>I need to store the data somewhere and I choose to use mongodb, because of no particular reason :). Let&rsquo;s install it via the <a href="http://brew.sh/">homebrew</a> package manager by using the commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew update
</span><span class='line'>brew install mongodb
</span></code></pre></td></tr></table></div></figure>


<p>If you want to download the install package or use some other methods to install, please visit the page <a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-os-x/">Install MongoDB Community Edition on OS X</a> and choose the method that suits you.</p>

<p>Then create the directory structure for mongodb in a suitable location and start the server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir mongodb/data/db
</span><span class='line'>mongod --rest --dbpath mongodb/
</span></code></pre></td></tr></table></div></figure>


<p>You can confirm that the mongodb service is up and running by visiting <a href="http://localhost:28017">http://localhost:28017</a>.</p>

<h4>How to configure mongo to run as a service?</h4>

<p>Because, I installed mongodb using brew I can also start, stop and list mongodb as a service on macOS with the following command:</p>

<figure class='code'><figcaption><span>Starting and stopping mongodb servce using brew.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew services start mongodb
</span><span class='line'>brew services stop mongodb
</span><span class='line'>brew services list
</span></code></pre></td></tr></table></div></figure>


<p>My only problem is with this approach is that I do not know how can I enable the &ndash;rest interface in this case, but navigating to <a href="http://localhost:27017">http://localhost:27017</a> I get the standard mongodb warning, meaning that my database engine is running and that is good enough for now.</p>

<p>In order, to communicate with mongodb in python, you will need to install pymongo module using pip:</p>

<figure class='code'><figcaption><span>Installing pymongo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install pymongo
</span></code></pre></td></tr></table></div></figure>


<h3>Saving the items in db</h3>

<p>To be able to save the items gathered you will need to add some configuration to your project and also add some code to your pipelines.py.</p>

<h4>Setting up a Pipeline</h4>

<p>First, let’s see how the pipeline works. We will define a new class called MongoDBPipeline. This class has a constructor and a process_item method that will be called whenever a new item is created.</p>

<p>We will be using the <strong>process_item</strong> to check the validity of the item first, then it will be checked against a list called <strong>ids_seen</strong>. This list contains all the items that we already processed. We will ensure this way that there will be  no duplicated items in our database.</p>

<p>If the item is valid and it is not in our list of previous items then we ca add it to our mongo database.</p>

<figure class='code'><figcaption><span>Validating and adding the item to our mongodb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">valid</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">item</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="n">valid</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">DropItem</span><span class="p">(</span><span class="s">&quot;Missing {0}!&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">valid</span> <span class="ow">and</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;jobid&#39;</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ids_seen</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ids_seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">&#39;jobid&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="n">msg</span><span class="p">(</span><span class="s">&quot;Job added to MongoDB database!&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">level</span><span class="o">=</span><span class="n">log</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="n">spider</span><span class="o">=</span><span class="n">spider</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">DropItem</span><span class="p">(</span><span class="s">&quot;Job id {0} already exists!&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s">&#39;jobid&#39;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we need to check out the constructor for this class. Here we initialise the connection and fill the <strong>ids_seen</strong> list with the identifiers that we already have in the database.</p>

<figure class='code'><figcaption><span>Initialising database connection and fill up our id list.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pymongo</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.conf</span> <span class="kn">import</span> <span class="n">settings</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.exceptions</span> <span class="kn">import</span> <span class="n">DropItem</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">log</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MongoDBPipeline</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">connection</span> <span class="o">=</span> <span class="n">pymongo</span><span class="o">.</span><span class="n">MongoClient</span><span class="p">(</span>
</span><span class='line'>            <span class="n">settings</span><span class="p">[</span><span class="s">&#39;MONGODB_SERVER&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="n">settings</span><span class="p">[</span><span class="s">&#39;MONGODB_PORT&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">db</span> <span class="o">=</span> <span class="n">connection</span><span class="p">[</span><span class="n">settings</span><span class="p">[</span><span class="s">&#39;MONGODB_DB&#39;</span><span class="p">]]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="n">settings</span><span class="p">[</span><span class="s">&#39;MONGODB_COLLECTION&#39;</span><span class="p">]]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ids_seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">job</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">find</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ids_seen</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">job</span><span class="p">[</span><span class="s">&#39;jobid&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Number of jobs in database&quot;</span>
</span><span class='line'>        <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ids_seen</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Configuring the mongodb connection.</h4>

<p>We need to do a little more work in order to be able to connect to the database and to register the newly added MongoDBPipeline, so it is actually called on the new items. In the settings.py, we need to added either add or modify the following line, so it looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">ITEM_PIPELINES</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;stackjobs.pipelines.MongoDBPipeline&#39;</span> <span class="p">:</span> <span class="mi">300</span><span class="p">,</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">MONGODB_SERVER</span> <span class="o">=</span> <span class="s">&quot;localhost&quot;</span>
</span><span class='line'><span class="n">MONGODB_PORT</span> <span class="o">=</span> <span class="mi">27017</span>
</span><span class='line'><span class="n">MONGODB_DB</span> <span class="o">=</span> <span class="s">&quot;stackoverflow&quot;</span>
</span><span class='line'><span class="n">MONGODB_COLLECTION</span> <span class="o">=</span> <span class="s">&quot;jobs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the first line, we register our pipeline class on the system and assign a priority. With this mechanism, we can specify    in what we order we want the pipelines to be executed, if we would have more than one pipelines.</p>

<p>The four lines after that are specifying how to connect to the database, such as the name of the server and server port, database name and collection name (table name).</p>

<p>With these changes we can now run our parser and all items scraped will be stored in our mongo database.</p>

<h3>Exporting data from mongo</h3>

<p>What to do next? Maybe, we want to export the data to a file, so we can do further analysis and cleaning up on it. For this, I used the mongoexport command with the following parameters to create a csv file</p>

<figure class='code'><figcaption><span>Exporting data to csv file.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongoexport --db stackoverflow --collection <span class="nb">jobs</span> --type csv --fields jobid,title,employer,location,salary,description,tags,url,date --out stackoverflow_jobs.csv
</span></code></pre></td></tr></table></div></figure>


<p>It is also possible to export the data in son format, if needed.  For that, you can use the following command:</p>

<figure class='code'><figcaption><span>Exporting data in json format. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongoexport --db stackoverflow --collection <span class="nb">jobs</span> --type json --fields jobid,title,employer,location,salary,description,tags,url,date --out stackoverflow_jobs.json
</span></code></pre></td></tr></table></div></figure>


<h3>Scheduling our job</h3>

<p>The last thing we need to do is to schedule our scraper to run on my mac. This can be achieved using crontab. I will schedule my scraper to run in every 6 hours as I do not think that running it more often would make sense.</p>

<p>First, you will need to start the nano editor to edit your crontab file:</p>

<figure class='code'><figcaption><span>Launching nano to edit crontab.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>env <span class="nv">EDITOR</span><span class="o">=</span>nano crontab -e
</span></code></pre></td></tr></table></div></figure>


<p>Now enter the following to run our scraper every 6 hours. Use Ctrl-0 and Ctrl-X to exit the editor and save.</p>

<figure class='code'><figcaption><span>Enter this line to your crontab file. </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="m">0</span> */6 * * *  <span class="nb">cd</span> ~/dev/scrapers/stackjobs <span class="o">&amp;&amp;</span> /usr/local/bin/scrapy crawl Stackjob
</span></code></pre></td></tr></table></div></figure>


<p>To list the existing crontab jobs, we can use the following command:</p>

<figure class='code'><figcaption><span>Listing existing crontab jobs </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>crontab -l
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Summary</h3>

<p>In this part, we have installed mongodb on our machine and added logic and configuration to the scrapy project, so we can save all items that has been found to the database. Also, We have added a way to export the data into CSV or JSON file format from the mongo database. Finally, added this script to the crontab job and scheduled to run it every 2 hours.</p>

<p>In the next part, I will spend a little time on the exported data and use pandas to transform the exported data into a a better consumable format.</p>

<h3>Additional Information:</h3>

<ul>
<li><a href="https://ole.michelsen.dk/blog/schedule-jobs-with-crontab-on-mac-osx.html">Schedule jobs with crontab on Mac OS X</a></li>
<li><a href="http://alvinalexander.com/linux/unix-linux-crontab-every-minute-hour-day-syntax">Unix &amp; Linux crontab every examples</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping Stackoverflow Careers for Fun and Profit]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/07/scraping-stackoverflow-careers-for-fun-and-profit/"/>
    <updated>2016-07-12T07:55:13+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/07/scraping-stackoverflow-careers-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>When you want to learn something new the best way to do is to come up with a problem that can be useful to you or maybe to others and then solve it. Not so long ago I decided that I want to start learning something data related. So I came up with the idea that I would create a solution that gathers the data from <a href="http://stackoverflow.com/jobs">Stackoverflow Jobs</a>. Do some manipulation on it  and then present it in a nice format. This is the first step of the journey.</p>

<p>To present something, I need data. To get the data, I need to write a script that gathers data from the web. I decided to use python and <a href="http://scrapy.org">Scrapy framework</a>.</p>

<!--more-->


<p></p>

<h3>Gearing up…</h3>

<p>First, some disclaimers. I am new to python and to scrapy as well. I had zero knowledge any of these topics before. I am learning this stuff as I write these posts. Any constructive and helpful comments are more than welcome.</p>

<p>The code for this project can be found in <a href="https://github.com/gyurisc/stackjobs">stackjobs repo on github</a>.</p>

<p>After installing Python and <a href="http://scrapy.org">Scrapy</a>, the first thing is to create the web-scraper project by typing the following  command(s) in your console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> scrapy startproject stackjobs
</span><span class='line'>  <span class="nb">cd </span>stackjobs
</span><span class='line'>  scrapy genspider Stackjob stackoverflow.com
</span></code></pre></td></tr></table></div></figure>


<p>With these commands the following has been achieved. First we created a new project called stackjobs. The script created a folder structure with files in it. Then we entered the folder and created a spider called Stackjob using the genspider command. This created a spider that can crawl stackoverflow.com.</p>

<p>Looking at the spiders folder, we can see the source file for Stackjob spider:</p>

<figure class='code'><figcaption><span>spider created </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">scrapy</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">StackjobSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span><span class='line'>      <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Stackjob&quot;</span>
</span><span class='line'>      <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;stackoverflow.com&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="n">start_urls</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;http://www.stackoverflow.com/&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>              <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You can run the spider this by executing the following command:</p>

<figure class='code'><figcaption><span>running the spider </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scrapy crawl Stackjob
</span></code></pre></td></tr></table></div></figure>


<p>This outputs a bunch of stuff that we are not interested in really.</p>

<figure class='code'><figcaption><span>bunch of stuff we are not really interested in</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Scrapy 1.1.0 started <span class="o">(</span>bot: stackjobs<span class="o">)</span>
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Overridden settings: <span class="o">{</span><span class="s1">&#39;NEWSPIDER_MODULE&#39;</span>: <span class="s1">&#39;stackjobs.spiders&#39;</span>, <span class="s1">&#39;SPIDER_MODULES&#39;</span>: <span class="o">[</span><span class="s1">&#39;stackjobs.spiders&#39;</span><span class="o">]</span>, <span class="s1">&#39;ROBOTSTXT_OBEY&#39;</span>: True, <span class="s1">&#39;BOT_NAME&#39;</span>: <span class="s1">&#39;stackjobs&#39;</span><span class="o">}</span>
</span><span class='line'>…
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Enabled item pipelines:
</span><span class='line'><span class="o">[]</span>
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Spider opened
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Crawled <span class="m">0</span> pages <span class="o">(</span>at <span class="m">0</span> pages/min<span class="o">)</span>, scraped <span class="m">0</span> items <span class="o">(</span>at <span class="m">0</span> items/min<span class="o">)</span>
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Telnet console listening on 127.0.0.1:6023
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Redirecting <span class="o">(</span>301<span class="o">)</span> to &lt;GET http://stackoverflow.com/robots.txt&gt; from &lt;GET http://www.stackoverflow.com/robots.txt&gt;
</span><span class='line'>2016-07-11 22:22:30 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Crawled <span class="o">(</span>200<span class="o">)</span> &lt;GET http://stackoverflow.com/robots.txt&gt; <span class="o">(</span>referer: None<span class="o">)</span>
</span><span class='line'>2016-07-11 22:22:31 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Redirecting <span class="o">(</span>301<span class="o">)</span> to &lt;GET http://stackoverflow.com/&gt; from &lt;GET http://www.stackoverflow.com/&gt;
</span><span class='line'>2016-07-11 22:22:31 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Crawled <span class="o">(</span>200<span class="o">)</span> &lt;GET http://stackoverflow.com/robots.txt&gt; <span class="o">(</span>referer: None<span class="o">)</span>
</span><span class='line'>2016-07-11 22:22:31 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Crawled <span class="o">(</span>200<span class="o">)</span> &lt;GET http://stackoverflow.com/&gt; <span class="o">(</span>referer: None<span class="o">)</span>
</span><span class='line'>2016-07-11 22:22:31 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Closing spider <span class="o">(</span>finished<span class="o">)</span>
</span><span class='line'>2016-07-11 22:22:31 <span class="o">[</span>scrapy<span class="o">]</span> INFO: Spider closed <span class="o">(</span>finished<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This basically tells us that our spider ran and downloaded zero pages exactly. We are interested in the Stackoverflow job listing, so let’s modify the Stackjob spider by adding start urls that are relevant for us:</p>

<figure class='code'><figcaption><span>adding start urls </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">StackjobSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Stackjob&quot;</span>
</span><span class='line'>    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;stackoverflow.com&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&amp;pg=2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&amp;pg=3&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&amp;pg=4&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the spider again we can find that still nothing really happens. The pages are downloaded, but we do not process the information on the pages. In order to process the information, let’s modify the parse method in our spider.</p>

<p>First we need to add a few imports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">scrapy</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StackjobSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Stackjob&quot;</span>
</span><span class='line'>    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;stackoverflow.com&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&amp;pg=2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;https://stackoverflow.com/jobs?sort=p&amp;pg=3&#39;</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then add some code to the <em>parse</em> method. This code will loop through all the jobs on the page found by our path expression and will create a <em>StackjobItem</em> for each job found. Then it will add today’s date to the newly created item.</p>

<figure class='code'><figcaption><span>adding parsing logic </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">jobs</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Selector</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;//div[contains(@class, &quot;-item&quot;) and contains(@class, &quot;-job&quot;)]&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">job</span> <span class="ow">in</span> <span class="n">jobs</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item</span> <span class="o">=</span> <span class="n">StackjobItem</span><span class="p">()</span>
</span><span class='line'>                  <span class="n">item</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>       
</span><span class='line'>
</span><span class='line'>                  <span class="c"># actual parsing will come here </span>
</span><span class='line'>
</span><span class='line'>        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">results</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running this code, you will receive a couple of messages complaining about StackjobItem not being defined. This is expected as we still need to define this class. Open up <em>items.py</em> and rename the class <em>StackjobsItem</em> class to <em>StackjobItem</em>. This is the class what we will use to store the extracted data for each job. For this you will need to define a few fields. The final class will look like this:</p>

<figure class='code'><figcaption><span>StackjobItem with fields</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">scrapy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scrapy.item</span> <span class="kn">import</span> <span class="n">Item</span><span class="p">,</span> <span class="n">Field</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StackjobItem</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Item</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># define the fields for your item here like:</span>
</span><span class='line'>    <span class="c"># name = scrapy.Field()</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">jobid</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">employer</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">location</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">equity</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">salary</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">tags</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="n">date</span> <span class="o">=</span> <span class="n">Field</span><span class="p">()</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, head back to <em>Stackjob.py</em> and import the item class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">stackjobs.items</span> <span class="kn">import</span> <span class="n">StackjobItem</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the spider, you should see something like this in the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2016-07-12 07:07:17 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Scraped from &lt;<span class="m">200</span> https://stackoverflow.com/jobs?sort<span class="o">=</span>p<span class="p">&amp;</span><span class="nv">pg</span><span class="o">=</span>3&gt;
</span><span class='line'><span class="o">{</span><span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;2016-07-12&#39;</span><span class="o">}</span>
</span><span class='line'>2016-07-12 07:07:17 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Scraped from &lt;<span class="m">200</span> https://stackoverflow.com/jobs?sort<span class="o">=</span>p<span class="p">&amp;</span><span class="nv">pg</span><span class="o">=</span>3&gt;
</span><span class='line'><span class="o">{</span><span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;2016-07-12&#39;</span><span class="o">}</span>
</span><span class='line'>2016-07-12 07:07:17 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Scraped from &lt;<span class="m">200</span> https://stackoverflow.com/jobs?sort<span class="o">=</span>p<span class="p">&amp;</span><span class="nv">pg</span><span class="o">=</span>3&gt;
</span><span class='line'><span class="o">{</span><span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;2016-07-12&#39;</span><span class="o">}</span>
</span><span class='line'>2016-07-12 07:07:17 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Scraped from &lt;<span class="m">200</span> https://stackoverflow.com/jobs?sort<span class="o">=</span>p<span class="p">&amp;</span><span class="nv">pg</span><span class="o">=</span>3&gt;
</span><span class='line'><span class="o">{</span><span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;2016-07-12&#39;</span><span class="o">}</span>
</span><span class='line'>2016-07-12 07:07:17 <span class="o">[</span>scrapy<span class="o">]</span> DEBUG: Scraped from &lt;<span class="m">200</span> https://stackoverflow.com/jobs?sort<span class="o">=</span>p<span class="p">&amp;</span><span class="nv">pg</span><span class="o">=</span>3&gt;
</span><span class='line'><span class="o">{</span><span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;2016-07-12&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, this tells us that the items are being generated and each item has one field only and that is the <em>date</em> field. This is not really useful, so let’s add more information.</p>

<h3>To the actual scraping</h3>

<p>For getting information out of the items found on the page, we will be using xpath expressions. Earlier, we added one to our parse method. This selector is responsible to find all the jobs on our page. It basically tells scrapy to return all elements that are a div and has both a <em>-job</em> and <em>-item</em> css class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">jobs</span> <span class="o">=</span> <span class="n">Selector</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;//div[contains(@class, &quot;-item&quot;) and contains(@class, &quot;-job&quot;)]&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we will enumerate through the collection returned in the <em>jobs</em> variable and extract some more information from each item and store it.</p>

<p>In the <em>parse</em> method of our spider, just below the date field add the following lines:</p>

<figure class='code'><figcaption><span>xpaths and css selectors</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;tags&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;tags&quot;)]/p/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;description&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;p[contains(@class,&quot;text&quot;) and contains(@class, &quot;description&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;location&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;ul[contains(@class, &quot;metadata&quot;) and contains(@class, &quot;primary&quot;)]/li[contains(@class, &quot;location&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;employer&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;ul[contains(@class, &quot;metadata&quot;) and contains(@class, &quot;primary&quot;)]/li[contains(@class, &quot;employer&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;jobid&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;@data-jobid&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/h1/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/h1/a/@href&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here, we have an xpath expression for each field that we are interested in. For coming up with the xpath expression I was using Google Chrome and its wonderful <a href="https://www.codeschool.com/courses/discover-devtools">DevTools</a>. You can bring this up by opening a web-page and right-clicking on any element and select <em>Inspect</em> from the menu.</p>

<p>The other stuff we need to come up with the expressions is the knowledge of css and lot’s of trial and error.</p>

<h3>XPath and CSS munging</h3>

<p>The other stuff we need to come up with the expressions is the knowledge of css and lot’s of trial and error. Let’s see a few expressions:</p>

<figure class='code'><figcaption><span>title and url </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/h1/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/h1/a/@href&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we are searching with a div that has the <em>title</em> as a css class and then we need the link <em>a</em> under the <em>h1</em> heading. The text from this link will be store in the <em>title</em> field and the actual link in the <em>url</em> field.</p>

<figure class='code'><figcaption><span>extracting tags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">item</span><span class="p">[</span><span class="s">&#39;tags&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;tags&quot;)]/p/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here, we are looking for a div with a class <em>tags</em> and all the text from the links underneath the paragraph.</p>

<figure class='code'><figcaption><span>extracting the employer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="n">item</span><span class="p">[</span><span class="s">&#39;employer&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;ul[contains(@class, &quot;metadata&quot;) and contains(@class, &quot;primary&quot;)]/li[contains(@class, &quot;employer&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here, we are looking for an unordered list <em>ul</em> with both a class <em>metadata</em> and <em>primary</em> and underneath we are looking for a list item with <em>employer</em> class. We then extract the first item from the returned list and call <em>strip()</em> to get rid of the whitespace characters.</p>

<p>There is one last field that needs to be extracted called <em>salary</em>. This is a bit tricky, because it is not always present.</p>

<p>First, we need to check, if we have an html span tag with class <em>salary</em> our title, if we have then we just extract it and then strip out of the white spaces from the result.</p>

<figure class='code'><figcaption><span>checking if salary is present and extracting it </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title”)]/span[contains(@class,&quot;salary&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">():</span>
</span><span class='line'>    <span class="n">item</span><span class="p">[</span><span class="s">&#39;salary&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/span[contains(@class,&quot;salary&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here is how the full parse method should look like:</p>

<figure class='code'><figcaption><span>final parse method </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span><span class='line'>        <span class="n">jobs</span> <span class="o">=</span> <span class="n">Selector</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;//div[contains(@class, &quot;-item&quot;) and contains(@class, &quot;-job&quot;)]&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">job</span> <span class="ow">in</span> <span class="n">jobs</span><span class="p">:</span>
</span><span class='line'>            <span class="n">item</span> <span class="o">=</span> <span class="n">StackjobItem</span><span class="p">()</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;tags&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;tags&quot;)]/p/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;description&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;p[contains(@class,&quot;text&quot;) and contains(@class, &quot;description&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;location&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;ul[contains(@class, &quot;metadata&quot;) and contains(@class, &quot;primary&quot;)]/li[contains(@class, &quot;location&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;employer&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;ul[contains(@class, &quot;metadata&quot;) and contains(@class, &quot;primary&quot;)]/li[contains(@class, &quot;employer&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;jobid&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;@data-jobid&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/h1/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="n">item</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/h1/a/@href&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/span[contains(@class,&quot;salary&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">():</span>
</span><span class='line'>                <span class="n">item</span><span class="p">[</span><span class="s">&#39;salary&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">&#39;div[contains(@class,&quot;-title&quot;)]/span[contains(@class,&quot;salary&quot;)]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># yield item</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">results</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running the parser, we should see the extra fields being added to our item.</p>

<figure class='code'><figcaption><span>output from the parser </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span><span class="s1">&#39;date&#39;</span>: <span class="s1">&#39;2016-07-12&#39;</span>,
</span><span class='line'> <span class="s1">&#39;description&#39;</span>: u<span class="s1">&#39;COMPANY DESCRIPTION\r\nSAP\u2019s vision is to help the world run better and improve people\u2019s lives.\r\nAs the\u2026&#39;</span>,
</span><span class='line'> <span class="s1">&#39;employer&#39;</span>: u<span class="s1">&#39;SAP SE&#39;</span>,
</span><span class='line'> <span class="s1">&#39;jobid&#39;</span>: u<span class="s1">&#39;106345&#39;</span>,
</span><span class='line'> <span class="s1">&#39;location&#39;</span>: u<span class="s1">&#39;Walldorf, Deutschland&#39;</span>,
</span><span class='line'> <span class="s1">&#39;tags&#39;</span>: <span class="o">[</span>u<span class="s1">&#39;c++&#39;</span>, u<span class="s1">&#39;python&#39;</span>, u<span class="s1">&#39;linux&#39;</span>, u<span class="s1">&#39;git&#39;</span>, u<span class="s1">&#39;shell&#39;</span><span class="o">]</span>,
</span><span class='line'> <span class="s1">&#39;title&#39;</span>: u<span class="s1">&#39;C++ (Senior) Developer for SAP HANA&#39;</span>,
</span><span class='line'> <span class="s1">&#39;url&#39;</span>: u<span class="s1">&#39;/jobs/106345/c-plus-plus-senior-developer-for-sap-hana-sap-se&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code for this project can be found in <a href="https://github.com/gyurisc/stackjobs">stackjobs repo on github</a>.</p>

<p>This is exciting. In the next part, I will show how to store the results in a mongoldb database.</p>

<p><strong>Update 2017-06-13</strong>: Fixing small typos, editing and shortening console output.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Generate Typescript Classes From C# Like a Pro]]></title>
    <link href="http://www.littlebigtomatoes.com/2016/06/how-to-generate-typescript-classes-from-c-number-like-a-pro/"/>
    <updated>2016-06-13T13:29:09+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2016/06/how-to-generate-typescript-classes-from-c-number-like-a-pro</id>
    <content type="html"><![CDATA[<p>I will teach you how to create Typescript classes from your existing C# classes effortlessly like a pro within 30 seconds.</p>

<!-- more -->


<p>Sometimes, you will need to create typescript classes where the class already exists in C#. This is super boring and tedious, but here is a cool plugin to help you.</p>

<p>First you will need to install this plugin called <a href="https://visualstudiogallery.msdn.microsoft.com/eb0887f8-3ac1-434a-b50b-f0112f1572f7">TypescriptSyntaxPaste</a> in Visual Studio.NET 2015.</p>

<p><img src="http://www.littlebigtomatoes.com/images/InstallTypescriptPaste_001.gif" title="Install TypeScriptSyntaxPaste plugin" alt="Animated git showing how to install TypeScriptSyntaxPage plugin in Visual Studio.NET 2015"></p>

<h2>Installing it</h2>

<ul>
<li>Go to Tools | Extensions in Visual Studio .NET 2015.</li>
<li>Select Visual Studio Gallery under the Online category.</li>
<li>Search for TypescriptSyntaxPaste in the search folder.</li>
<li>Find the plugin in the results pane and click on Download.</li>
<li>Then click Install.</li>
<li>Restart Visual Studio.</li>
</ul>


<h2>Using it</h2>

<p>After installing the plugin this is how you use it:</p>

<p><img src="http://www.littlebigtomatoes.com/images/UseTypeScriptPaste_002.gif" title="Using TypeScriptSyntaxPaste plugin" alt="Animated git showing how to use TypeScriptSyntaxPage plugin in Visual Studio.NET 2015"></p>

<ul>
<li>Select your C# class and press Ctrl-C to copy.</li>
<li>Open a Typescript file (.ts or .tsx extension will work).</li>
<li>Paste the code.</li>
<li>Observe the results.</li>
</ul>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serializing Empty IEnumerable<T> With protobuf.net]]></title>
    <link href="http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net/"/>
    <updated>2015-10-30T17:06:13+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2015/10/serializing-empty-ienumerable-with-protobuf-dot-net</id>
    <content type="html"><![CDATA[<p>I am recently trying to use protobuf.net for serializing objects for network communication in a .net application. Protobuf is a great format for sending data. Protobuf tries to be very frugal to save bandwidth. However, this causes some unexpected side effects when using it with .NET.</p>

<!-- more -->


<p>For example, If there is a collection serialized and the collection count was zero, then the serializer is going to write out null and this collection will be deserialized as null on the other end.</p>

<p>This is easy to fix when you have only a few classes that holding your models, but can be a huge problem when you have a very large number of classes that you are trying to serialize and the previously used serializer was always deserializing an empty collection to an empty collection.</p>

<p>To solve this, we need extra wrapper class and within this wrapper class it is possible to detect if the underlying generic type is a IEnumerable&lt;T&gt; and create code to initialize the data member as an empty collection if needed.</p>

<p>The code below demonstrates how to use this technique.</p>

<figure class='code'><figcaption><span>creating empty collection in data wrapper </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DataWrapper</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">T</span> <span class="n">Data</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DataWrapper</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Type</span> <span class="n">dataType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Protobuf deserializes empty collections as null in order to combat this we create an empty collection by default</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dataType</span><span class="p">.</span><span class="n">IsGenericType</span> <span class="p">&amp;&amp;</span> <span class="n">dataType</span><span class="p">.</span><span class="n">GetGenericTypeDefinition</span><span class="p">()</span> <span class="p">==</span> <span class="k">typeof</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;&gt;))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Type</span> <span class="n">underlyingType</span> <span class="p">=</span> <span class="n">entityType</span><span class="p">.</span><span class="n">GetGenericArguments</span><span class="p">()[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">listType</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;&gt;);</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">concreteType</span> <span class="p">=</span> <span class="n">listType</span><span class="p">.</span><span class="n">MakeGenericType</span><span class="p">(</span><span class="n">underlyingType</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Data</span> <span class="p">=</span> <span class="p">(</span><span class="n">TEntity</span><span class="p">)</span><span class="n">Activator</span><span class="p">.</span><span class="n">CreateInstance</span><span class="p">(</span><span class="n">concreteType</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Data</span> <span class="p">=</span> <span class="k">default</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem With Wirecutter]]></title>
    <link href="http://www.littlebigtomatoes.com/2014/11/the-problem-with-wirecutter/"/>
    <updated>2014-11-28T17:17:42+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2014/11/the-problem-with-wirecutter</id>
    <content type="html"><![CDATA[<p>I love thewirecutter.com. I like them a lot. They are posting really well researched reviews about stuff I care about a lot. Headphones, smartphones, TVs, NAS. Some of their articles are based on hundreds of hours of research and they are trying out dozens of gadgets to find the best ones. They save me time, energy and money and I trust them…</p>

<p>Whenever I am looking for something to buy or I need to learn about stuff I will go there. Read their article and learn a lot about the actual topic. After I am done with the reading I am ready to buy whatever they recommend me to buy. Only if, I could buy it.</p>

<p>Recently, I was looking for a new smart tv that is cheap, so I read from start to finish <a href="http://thewirecutter.com/reviews/the-best-500-tv/">The Best $500 TV</a> on my favourite site. Their pick is <a href="http://www.amazon.com/gp/product/B00BEAFLYK?tag=thewire06-20&amp;link_code=ur2&amp;creative=9325&amp;camp=211189">Samsung PN51F4500</a>, which seems like an amazing tv, so let’s buy it. Quick google search shows that I cannot buy this tv in the EU.</p>

<p>It turns out I need to decrypt the model number and try to find a similar tv. So PN51F4500 <a href="http://www.samsung.com/us/support/faq/FAQ00057975/76904/LN46B540P8FXZA">means</a> that it is a P=Plasma TV made for N=North America in 51 inch size. The model number also tells me that it is a F=2013 model from the 4500 series. Now I know enough, so I will search for PE51F4500 in the EU or one of the variants. I found the <a href="http://www.samsung.com/de/consumer/tv-audio-video/television/plasma-tv/PE51H4500AWXZG">PE51H4500AW</a> model which I  think is the 2014 year model of the same series.</p>

<p>So the problem is with wirecutter.com is not really a problem for all. It is rather my problem. It is the problem of amazon that they are no delivering to remote places like the eastern part of the EU. It is the stupidity of the TV manufacturers that they give out different model numbers for product that are the same and I have to spend time on decrypting the model number and   then translate it to a model that is available in my country.</p>

<p>At the end, it comes down to a lot of factor why this is a problem and the easiest way to fix this if wire cutter.com would start posting the different model numbers for each market - if there are differences. It would make my life easier…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Does the Term Porcelain Mean in Git]]></title>
    <link href="http://www.littlebigtomatoes.com/2014/10/what-does-the-term-porcelain-mean-in-git/"/>
    <updated>2014-10-28T16:48:31+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2014/10/what-does-the-term-porcelain-mean-in-git</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;Porcelain&#8221; is the material from which toilets are usually made (and sometimes other fixtures such as washbasins). This is distinct from &#8220;plumbing&#8221; (the actual pipes and drains), where the porcelain provides a more user-friendly interface to the plumbing.</p><p>Git uses this terminology in analogy, to separate the low-level commands that users don&#8217;t usually need to use directly (the &#8220;plumbing&#8221;) from the more user-friendly high level commands (the &#8220;porcelain&#8221;).</p><footer><strong>Porcelain</strong> <cite><a href='http://stackoverflow.com/questions/6976473/what-does-the-term-porcelain-mean-in-git'>Git Porcelain</a></cite></footer></blockquote>


<p>One of those programmer jokes&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading About Date and Time]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/06/reading-about-date-and-time/"/>
    <updated>2013-06-27T12:45:00+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/06/reading-about-date-and-time</id>
    <content type="html"><![CDATA[<blockquote><p>So is Noda Time perfect then?</p><p>Of course not. Noda Time suffers several problems:</p><p>Despite all of the above, I&#8217;m a rank amateur when it comes to the theory of date and time. Leap seconds baffle me. The thought of a Julian-Gregorian calendar with a cutover point makes me want to cry, which is why I haven&#8217;t quite implemented it yet.</p><footer><strong>NodaTime</strong> <cite><a href='http://noda-time.blogspot.hu/2011/08/what-wrong-with-datetime-anyway.html'>What&#8217;s Wrong With DateTime Anyway?</a></cite></footer></blockquote>


<p>I am getting more confused about this <strong>simple</strong> thing called date and time minute by minute&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple.Data and Dynamic Calls Are Awesome]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome/"/>
    <updated>2013-06-17T11:59:00+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/06/simple-dot-data-and-dynamic-calls-are-simply-awesome</id>
    <content type="html"><![CDATA[<p>Couple of weeks ago I started to look into different open source packages on the .NET platform such as <a href="http://nancyfx.org/">Nancy</a> and <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Simple.Data</a>. They all looked very cool, but one paragraph in an article called <a href="http://blog.markrendle.net/2010/08/05/introducing-simple-data/">Introducing Simple.Data</a> - explaining how the code snippet below works - caught my attention:</p>

<figure class='code'><figcaption><span>getting data from db </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="n">Database</span><span class="p">.</span><span class="n">Open</span><span class="p">();</span> <span class="c1">// Connection specified in config.</span>
</span><span class='line'><span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">FindByNameAndPassword</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>That’s pretty neat, right? So, did we have to generate the Database class and a bunch of table classes to make this work?</p><p>No.</p><p>In this example, the type returned by Database.Open() is dynamic. It doesn’t have a Users property, but when that property is referenced on it, it returns a new instance of a DynamicTable type, again as dynamic. That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters. The FindBy* methods will only return one record; there are FindAllBy* methods which return result sets. This approach is used by the Ruby/Rails ActiveRecord library; Ruby’s metaprogramming nature encourages stuff like this.</p><footer><strong>Mark Rendle</strong> <cite><a href='http://blog.markrendle.net/2010/08/05/introducing-simple-data'>Introducing Simple.Data</a></cite></footer></blockquote>


<p>Just read that sentence once again&hellip;</p>

<p><em>That instance doesn’t actually have a method called FindByNameAndPassword, but when it’s called, it sees “FindBy” at the start of the method, so it pulls apart the rest of the method name, combines it with the arguments, and builds an ADO.NET command which safely encapsulates the name and password values inside parameters.</em></p>

<p>This sounds like crazy awesome magic and I need to understand it!</p>

<h2>How magic works?</h2>

<p>To find out how the magic worked, I downloaded the source code from github and started to poke around the code. The rest of the article explains what I got out of this experiment.</p>

<!--more-->


<p></p>

<p>The sample project I created is sort of the skeleton of what Simple.Data does on the inside. This is not an attempt to reproduce or fully understand the library. I just wanted to understand how one can call a non-existing method on a class and what is happening behind the curtain that enables this at runtime.</p>

<figure class='code'><figcaption><span>disecting the magic    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>  <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">dyn</span> <span class="p">=</span> <span class="n">DynamicTest</span><span class="p">.</span><span class="n">GetDynamic</span><span class="p">();</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">dyn</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">FindByEmail</span><span class="p">(</span><span class="s">&quot;someone@somewhere.com&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, after poking around in the <a href="https://github.com/markrendle/Simple.Data">source code</a> of Simple.Data I realized that the magic happens by applying the <a href="http://msdn.microsoft.com/en-us/library/vstudio/dd264741.aspx">dynamic</a> keyword and DynamicObject.</p>

<figure class='code'><figcaption><span>DynamicObject skeleton     </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">DynamicTest</span> <span class="p">:</span> <span class="n">DynamicObject</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">dynamic</span> <span class="nf">GetDynamic</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DynamicTest</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I created a class that derives from DynamicObject and a method that returns an instance of this object, but instead of a return type I added the dynamic keyword to the method signature. What this does effectively is that when compiling my simple test code, the compiler will not look for the declaration of a Users property. It knows that this will resolved at runtime.</p>

<p>Once running this code there will be a RuntimeBinderException exception thrown with the the following message:</p>

<figure class='code'><figcaption><span>DynamicObject skeleton     </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Message</span><span class="p">=</span><span class="err">&#39;</span><span class="kt">object</span><span class="err">&#39;</span> <span class="n">does</span> <span class="n">not</span> <span class="n">contain</span> <span class="n">a</span> <span class="n">definition</span> <span class="k">for</span> <span class="err">&#39;</span><span class="n">Users</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we need to somehow create a Users property on the DynamicTest class. For this, we need to override the TryGetMember method of the DynamicObject and implement this behavior.</p>

<p>So, TryGetMember will just create and return an instance of an ObjectReference object. It has a parameter called binder that has information about the member that is called and an out parameter to pass back the result. The created object will be stored with binder.Name as key, so next time the same instance can be returned. This will represent the <strong>.User</strong> part of our dynamic call. But how will we handle the remaining method call?</p>

<figure class='code'><figcaption><span>TryGetMember implementation </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TryGetMember</span><span class="p">(</span><span class="n">GetMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="k">out</span> <span class="kt">object</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">result</span> <span class="p">=</span> <span class="n">GetOrAddDynamicReference</span><span class="p">(</span><span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="kt">dynamic</span> <span class="nf">GetOrAddDynamicReference</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_members</span><span class="p">.</span><span class="n">GetOrAdd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">new</span> <span class="n">ObjectReference</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ObjectReference is also derived from DynamicObject and it overrides the TryInvokeMember method to handle the remaining method call. Again, it receives a binder that contains information about the member that is being invoked, the parameters that is passed in and it has an out parameter that is used to pass back the result. What this method does is just simply prints out the method that is being invoked and its parameters.</p>

<figure class='code'><figcaption><span>TryInvokeMember implementation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TryInvokeMember</span><span class="p">(</span><span class="n">InvokeMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="p">,</span> <span class="k">out</span> <span class="kt">object</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">base</span><span class="p">.</span><span class="n">TryInvokeMember</span><span class="p">(</span><span class="n">binder</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="k">out</span> <span class="n">result</span><span class="p">))</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">try</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Called &quot;</span> <span class="p">+</span>
</span><span class='line'>                      <span class="n">_name</span> <span class="p">+</span> <span class="s">&quot;.&quot;</span> <span class="p">+</span>
</span><span class='line'>                      <span class="n">binder</span><span class="p">.</span><span class="n">Name</span> <span class="p">+</span>
</span><span class='line'>                      <span class="s">&quot;(&quot;</span> <span class="p">+</span>
</span><span class='line'>                      <span class="n">args</span><span class="p">.</span><span class="n">Aggregate</span><span class="p">((</span><span class="n">current</span><span class="p">,</span> <span class="n">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">current</span> <span class="p">+</span> <span class="s">&quot;, &quot;</span> <span class="p">+</span> <span class="n">next</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                      <span class="s">&quot;)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;result&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Method {0} not recognized&quot;</span><span class="p">,</span> <span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Method {0} not recognized&quot;</span><span class="p">,</span> <span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, that I better understand how all this works I realized that I am way behind with the new features of C#. I guess, I need to buy a book about the last version of the language, read it and learn a bit more as I am behind. Below is the full sample code that I created:</p>

<figure class='code'><figcaption><span>full source code for dynamic test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Concurrent</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Dynamic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">DynamicTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">dyn</span> <span class="p">=</span> <span class="n">DynamicTest</span><span class="p">.</span><span class="n">GetDynamic</span><span class="p">();</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">dyn</span><span class="p">.</span><span class="n">Users</span><span class="p">.</span><span class="n">FindByEmail</span><span class="p">(</span><span class="s">&quot;someone@somewhere.com&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">DynamicTest</span> <span class="p">:</span> <span class="n">DynamicObject</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">dynamic</span><span class="p">&gt;</span> <span class="n">_members</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">dynamic</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="n">DynamicTest</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">dynamic</span> <span class="nf">GetDynamic</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DynamicTest</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TryGetMember</span><span class="p">(</span><span class="n">GetMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="k">out</span> <span class="kt">object</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="p">=</span> <span class="n">GetOrAddDynamicReference</span><span class="p">(</span><span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">dynamic</span> <span class="nf">GetOrAddDynamicReference</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_members</span><span class="p">.</span><span class="n">GetOrAdd</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">new</span> <span class="n">ObjectReference</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">ObjectReference</span> <span class="p">:</span> <span class="n">DynamicObject</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ObjectReference</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">_name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">TryInvokeMember</span><span class="p">(</span><span class="n">InvokeMemberBinder</span> <span class="n">binder</span><span class="p">,</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="p">,</span> <span class="k">out</span> <span class="kt">object</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">base</span><span class="p">.</span><span class="n">TryInvokeMember</span><span class="p">(</span><span class="n">binder</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="k">out</span> <span class="n">result</span><span class="p">))</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Called &quot;</span> <span class="p">+</span>
</span><span class='line'>                          <span class="n">_name</span> <span class="p">+</span> <span class="s">&quot;.&quot;</span> <span class="p">+</span>
</span><span class='line'>                          <span class="n">binder</span><span class="p">.</span><span class="n">Name</span> <span class="p">+</span>
</span><span class='line'>                          <span class="s">&quot;(&quot;</span> <span class="p">+</span>
</span><span class='line'>                          <span class="n">args</span><span class="p">.</span><span class="n">Aggregate</span><span class="p">((</span><span class="n">current</span><span class="p">,</span> <span class="n">next</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">current</span> <span class="p">+</span> <span class="s">&quot;, &quot;</span> <span class="p">+</span> <span class="n">next</span><span class="p">)</span> <span class="p">+</span>
</span><span class='line'>                          <span class="s">&quot;)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;result&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">catch</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Method {0} not recognized&quot;</span><span class="p">,</span> <span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Method {0} not recognized&quot;</span><span class="p">,</span> <span class="n">binder</span><span class="p">.</span><span class="n">Name</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Navy Outside and a Pirate Dying to Be Released Inside]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/04/all-navy-outside-and-a-pirate-dying-to-be-released-inside/"/>
    <updated>2013-04-16T14:14:00+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/04/all-navy-outside-and-a-pirate-dying-to-be-released-inside</id>
    <content type="html"><![CDATA[<blockquote><p>She was then hired as a senior consultant to Digital Equipment Corporation, a position she retained until her death in 1992, aged 85.</p><p>Her primary activity in this capacity was as a goodwill ambassador, lecturing widely on the early days of computers, her career, and on efforts that computer vendors could take to make life easier for their users. She visited a large fraction of Digital&#8217;s engineering facilities, where she generally received a standing ovation at the conclusion of her remarks. During many of her lectures, she illustrated a nanosecond using salvaged obsolete Bell System 25 pair telephone cable, cut it to 11.8 inch (30 cm) lengths, the distance that light travels in one nanosecond, and handed out the individual wires to her listeners. Although no longer a serving officer, she always wore her Navy full dress uniform to these lectures.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Grace_Hopper'>Grace Hopper</a></cite></footer></blockquote>


<p>Grace Hopper invented the compiler and coined the term debugging. The two things I do in most of my professional life. She must be a truly remarkable person and I owe her my job! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop the Troll]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/04/stop-the-troll/"/>
    <updated>2013-04-09T06:44:00+02:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/04/stop-the-troll</id>
    <content type="html"><![CDATA[<blockquote><p>What does this sound like? Yes, it’s a textbook case of a protection racket. It is organized crime, plain and simple. It is an abuse of the legal system, an abuse of the patent system, and a moral affront.</p><p>In the face of organized crime, civilized people don’t pay up. When you pay up, you’re funding the criminals, which makes you complicit in their next attacks. I know, you’re just trying to write a little app for the iPhone with in-app purchases, and you didn’t ask for this fight to be yours, but if you pay the trolls, giving them money and comfort to go after the next round of indie developers, you’re not just being “pragmatic,” you have actually gone over to the dark side. Sorry. Life is a bit hard sometimes, and sometimes you have to step up and fight fights that you never signed up for.</p><footer><strong>Joel On Software</strong> <cite><a href='http://www.joelonsoftware.com/items/2013/04/02.html'>The Patent Protection Racket</a></cite></footer></blockquote>


<p>I think the last sentence is classic and I fully agree with it. Life is a bit hard sometimes, and sometimes you have to step up and fight fights that you never signed up for.</p>

<p>There are some very awfull software patents granted in the past and there are some, who are clearly abusing this system. Let&rsquo;s stop these trolls together!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Xamarin iOS on Windows]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/03/exploring-xamarin-ios-on-windows/"/>
    <updated>2013-03-28T08:24:00+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/03/exploring-xamarin-ios-on-windows</id>
    <content type="html"><![CDATA[<p>Xamarin not so long ago released the version 2.0 of their product that allows all .NET developers to use C# and .NET libraries to code apps for iOS and Android. Better yet, it allows us to use our bellowed Visual Studio.NET to code for these platforms.</p>

<p>I love to try out new things, so I decide to figure out if it is really possible to create very basic application for iOS and for Android purely from Visual Studio.NET.</p>

<!--more-->


<p></p>

<p>The one thing I need to add is that I am without any knowledge of Objective-C or the iOS platform. I can construct the very basic HelloWorld app in XCode, but this is how far my iOS knowledge reaches. Regarding Android, I have zero knowledge of the platform and how to construct the HelloWorld app for the platform. Nevertheless, I give it a try and document my ups and downs creating these apps in vs.net.</p>

<h3>Creating a new project</h3>

<p>I installed the Xamarin environment and started up Visual Studio.NET 2012. Selected File | New Project and created the project.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_001.png" title="New Project" alt="Creating new project for iOS in Visual Studio"></p>

<p>In order to be able to use Visual Studio.NET with Xamarin, you need the Business version or you will need to start the 30 days trial. I opted for the second option.</p>

<p>But first begin the <a href="http://docs.xamarin.com/guides/cross-platform/getting_started/beginning_a_xamarin_trial">30 days trial</a>.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_002.png" title="Starting the 30 days trial" alt="Starting the 30 days trial"></p>

<p>After creating and logging in with the Xamarin account the 30 days trial starts and Visual Studio .NET restarts. It starts searching on the network for active OS X machines to be used as build machine. I have nothing like that on my network, so let’s close the dialog.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_003.png" title="Searching for build machine" alt="Searching for build machine"></p>

<p>I have no mac machine on the network currently so let’s choose <strong>Close</strong>.</p>

<p>// footnote???
Minor inconvenience is that you will need a live network connection for Xamarin software to check the license with the server and this can be problematic, if you are doing this while you are commuting without network.</p>

<h3>Dude, where is my design surface?</h3>

<p>I created my HelloWorld project and my limited iOS knowledge tells me that this point I need to open .xib or .nib file and start dragging controls onto the design surface. Looking through the project there are no .xib files to open. Searching through the Add New Item dialog yields no result as well.</p>

<p>Looking through the guide I find the following section:</p>

<blockquote><p>Storyboard and XIB files (used by Apple’s Interface Builder for GUI design) cannot currently be edited in Visual Studio. If you create an application from a Storyboard template (or a template that includes XIB files) then you’ll have to switch to the Mac and open the entire solution in Xamarin Studio. From within Xamarin Studio, double-click on XIBs or Storyboards to open and edit them. This includes adding a new item after the project is created, from the following options:</p><p>Working with Storyboards and XIBs</p><p>Editing storyboard and XIB files must be done on OS X with Interface Builder. The Xamarin.iOS plug-in for Visual Studio does not provide any support for this.</p><footer><strong>Xamarin</strong> <cite><a href='http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio'>Introduction to Xamarin iOS for Visual Studio</a></cite></footer></blockquote>


<p><a href="http://xamarin.com/guide/">Xamarin Guide</a> explains the alternatives in greater details:</p>

<blockquote><p>Xamarin.iOS for Visual Studio comes with several simplified iOS application templates that eschew XIB and Storyboard files, giving developers the option of building their entire user interface in code.  That approach could be desirable for some developers on Windows who want to avoid Xcode and minimize their reliance on a Mac. Xamarin’s MonoTouch.Dialog library— which provides a simple, declarative API for building iOS user interface layouts in code—might prove especially useful for that particular audience.</p><p>Developers who still want to use XIB or Storyboard files can still use Xcode on Mac OS X in order to modify the layout. Fortunately, the high degree of interoperability between Xamarin Studio and Visual Studio makes that a relatively straightforward process. A developer can do most of their development with Visual Studio on Windows and jump over to Xamarin Studio on a Mac while working on user interface design. The same exact project and solution files can be used in both environments.</p><footer><strong>Xamarin</strong> <cite><a href='http://xamarin.com/guide/'>Xamarin Guide</a></cite></footer></blockquote>


<p>So you can get rid of XIB if you like and define your UI entirely using the dialog library or you can use XiB but then you need a Mac too.</p>

<h3>Rebooting to OS X</h3>

<p>I decided to stay with the path I know and restarted my macbook to boot OS X. This way I can use the xib approach for now and once I finished I will be going back to Visual Studio.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_004.png" title="Xamarin Studio on OS X" alt="Looking at Xamarin Studio in OS X"></p>

<p>Opening the project in Xamarin Studio I realized that I have no idea how to integrate a new storyboard to my project, so I opted to create a brand new project that has a xib file included. It is not a very high-tech move, but sometimes it pays to create your project from scratch.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_005.png" title="Creating a new project" alt="Creating a new project"></p>

<h3>Creating the UI in XCode</h3>

<p>Once the new project is created, I can open the xib file in XCode to add my controls and create actions and outlets for these controls. I started with dragging a label and a button onto the design surface.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_006.png" title="Dragging the controls in XCode" alt="Dragging the controls in XCode"></p>

<p>Selecting the code icon in XCode will bring in the source control editor. I now can control-drag – clicking on the control while dragging the control to the source code editor – to create my outlet for the Label and the action for my button.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_007.png" title="Press this button to bring in the source code editor in XCode" alt="Press this button to bring in the source code editor in XCode"></p>

<p>Pressing control and dragging the button to the source code editor will bring up a little window that allows me to set up the action for my button. I changed the connection type to action and name it btnPRessed.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_008.png" title="Creating an action for the button in XCode" alt="Creating an action for the button in XCode"></p>

<p>I do the same control dragging for the labe, but this time the connection type is set to outlet and the name lblText.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_009.png" title="Creating an outlet for the label in XCode" alt="Creating an outlet for the label in XCode"></p>

<p>The last important step is to make sure that you save the .xib file. I forget this most of the time annd the result is that these changes will not be generated in the code behind for the view controlller. Back in Xamarin Studio, I can confirm by looking at the codebehind for the view controller that the outlet and action for my controlls are showing up in the code. Let’s go back to Visual Studio.NET.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_010.png" title="Codebehind for the ViewController in Xamarin Studio shows that the constructs for my controlls are generated" alt="Codebehind for the ViewController in Xamarin Studio"></p>

<h3>Back to Visual Studio</h3>

<p>All I have left is to define the event handler – or action method if you like for my button and set the content of the label. The action is defined as a partial method in the code-behind, so I need to provide the implementation for my method. With this I am finished constructing my very basic application for iOS. All is left to test it on a Mac in an emulator to see if it works.</p>

<p><img src="http://www.littlebigtomatoes.com/images/xam_vs_011.png" title="Partial method for the button in Visual Studio" alt="Partial method for the button in Visual Studio"></p>

<h3>Conclusion</h3>

<p>Xamarin version 2.0 brings the possibility to develop for iOS from Visual Studio.NET for the first time. This is a very welcome change, but it has its own weakness. One is that for creating the UI you will need a Mac computer or you will need to code your whole UI in code. This can be addressed by creating a tool that allows us developers to do UI creation on Windows. Hopefully this will come in the next version. The other area that for testing and debugging you will not be able to live without a mac computer. Once again having a cheap mac computer on the network solves this problem. I have no experience how convenient the debugging, but I will try this soon.</p>

<p>Overall, I am very happy with the new version and the fact that they allow free use with limitation makes me very happy and probably I will invest my time to learn the technology. Well done, Xamarin!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With gridster.js]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/03/getting-started-with-gridster-dot-js/"/>
    <updated>2013-03-08T17:24:00+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/03/getting-started-with-gridster-dot-js</id>
    <content type="html"><![CDATA[<p>I am looking into to learn more about web client side programming, but whenever I find an interesting project I am overwhelmed with the unknown names of different libraries and technologies mentioned, while reading the project&rsquo;s page. Consider <a href="http://shopify.github.com/dashing/">Dashing</a> for example. They mention Sinatra, <a href="https://github.com/Shopify/dashing/wiki/How-to%3A-Deploy-to-Heroku">Heroku</a>, jQuery.. These are the ones that I have at least a slight idea what they are good for. But the list continues: <a href="https://github.com/sstephenson/sprockets">Sprockets</a>, <a href="http://gridster.net/">Gridster.js</a>, <a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/">Server Sent Events</a> and <a href="http://batmanjs.org/docs/batman.html#batman-view-bindings-keypath-filters">batman bindings</a>.</p>

<p>This is nuts, I do not understand any of these. So I decided to divide and conquer the problem and try to focus on one unknown technology at a time. The aim is not to master the library, but to construct a minimum viable sample that helps to understand what it is good for.</p>

<p>Let&rsquo;s start with <a href="http://gridster.net/">Gridster.js</a>.</p>

<p><img src="http://www.littlebigtomatoes.com/images/gridster_demo.png" title="Gridster demo page" alt="Gridster demo page"></p>

<p>The project page describes this library as:</p>

<!--more-->


<p></p>

<blockquote><p>Gridster is a jQuery plugin that allows building intuitive draggable layouts from elements spanning multiple columns. You can even dynamically add and remove elements from the grid. It is on par with sliced bread, or possibly better. MIT licensed. Suitable for children of all ages. Made by Ducksboard.</p></blockquote>


<h3>Making the minimum gridster page</h3>

<p>It seems that the library is good for creating grid layouts, where it is possible to re-arrange, add or remove dynamically the elements of the grid. Fair enough&hellip;</p>

<p>So I created an empty index.html and copied all css and javascript files to the assets folder. I added the following in the index.html:</p>

<figure class='code'><figcaption><span>main grid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;demo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;gridster&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>HELLO<span class="nt">&lt;/h1&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>WORLD<span class="nt">&lt;/h1&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>OR ELSE<span class="nt">&lt;h1&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>               
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;5&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;5&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;6&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;6&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>               
</span><span class='line'>          <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key here is the div with class gridster and the unordered list inside. The grid is represented by the unordered list and each of the list items inside the list are representing one grid cell in our grid.</p>

<figure class='code'><figcaption><span>examining one cell in the grid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>HELLO<span class="nt">&lt;/h1&gt;&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at a list item in greater detail, you will see that there are attributes describing the cell&rsquo;s position in the table using the data-row and data-col attributes and the size of the cell using the data-sizex, data-sizey attributes.</p>

<p>Next we need to call some javascript in order to initialize our grid. This is done by the following javascript block</p>

<figure class='code'><figcaption><span>initializing the grid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">gridster</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gridster</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.gridster &gt; ul&quot;</span><span class="p">).</span><span class="nx">gridster</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">widget_margins</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
</span><span class='line'>              <span class="nx">widget_base_dimensions</span><span class="o">:</span> <span class="p">[</span><span class="mi">140</span><span class="p">,</span> <span class="mi">140</span><span class="p">],</span>
</span><span class='line'>              <span class="nx">min_cols</span><span class="o">:</span> <span class="mi">6</span>
</span><span class='line'>          <span class="p">}).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;gridster&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/script&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Javascript and jQuery are not in my comfort zone yet, but it seems that the code selects something that has .gridster as a class and have ul underneath and sets the widget margin, base dimensions of the grid and the minimum number of columns to 6.</p>

<p>Below, you will see the full html page and css styles. You can also <a href="http://www.littlebigtomatoes.com/downloads/gridster_sample.zip">download</a> the sample, if you like.</p>

<p><strong>Update 2017-06-23</strong>: Fixing typos in code.</p>

<h3>Full index.html</h3>

<figure class='code'><figcaption><span>full index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>gridster test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;gyurisc&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;assets/css/jquery.gridster.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;assets/css/styles.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;demo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;gridster&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>HELLO<span class="nt">&lt;/h1&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>WORLD<span class="nt">&lt;/h1&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;h1&gt;</span>OR ELSE<span class="nt">&lt;h1&gt;&lt;/l&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;2&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;4&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>           
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;5&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;3&quot;</span> <span class="na">data-col=</span><span class="s">&quot;5&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;1&quot;</span> <span class="na">data-col=</span><span class="s">&quot;6&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li</span> <span class="na">data-row=</span><span class="s">&quot;2&quot;</span> <span class="na">data-col=</span><span class="s">&quot;6&quot;</span> <span class="na">data-sizex=</span><span class="s">&quot;1&quot;</span> <span class="na">data-sizey=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>               
</span><span class='line'>              <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/jquery.gridster.js&quot;</span> <span class="na">charster=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">gridster</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">gridster</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.gridster &gt; ul&quot;</span><span class="p">).</span><span class="nx">gridster</span><span class="p">({</span>
</span><span class='line'>                  <span class="nx">widget_margins</span><span class="o">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
</span><span class='line'>                  <span class="nx">widget_base_dimensions</span><span class="o">:</span> <span class="p">[</span><span class="mi">140</span><span class="p">,</span> <span class="mi">140</span><span class="p">],</span>
</span><span class='line'>                  <span class="nx">min_cols</span><span class="o">:</span> <span class="mi">6</span>
</span><span class='line'>              <span class="p">}).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;gridster&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Full styles.css</h3>

<figure class='code'><figcaption><span>styles.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#EEEEEE</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;Helvetica Neue&#39;</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">font</span><span class="o">-</span><span class="n">smoothing</span><span class="o">:</span> <span class="n">antialiased</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="k">x-small</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#666666</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="o">,</span> <span class="nt">ol</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="m">400</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">h3</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">25px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="m">600</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* Gridster styles */</span>
</span><span class='line'><span class="nc">.demo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">3em</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">7.5em</span> <span class="m">0</span> <span class="m">5.5em</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="m">#004756</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.demo</span><span class="nd">:hover</span> <span class="nc">.gridster</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">opacity</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.gridster</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">940px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">opacity</span><span class="o">:</span> <span class="o">.</span><span class="m">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">.6s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">.6s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">o</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">.6s</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">.6s</span><span class="p">;</span>
</span><span class='line'>    <span class="n">transition</span><span class="o">:</span> <span class="k">opacity</span> <span class="m">.6s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.gridster</span> <span class="nc">.gs_w</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="m">#FFF</span><span class="p">;</span>
</span><span class='line'>    <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">5px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">5px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OverConsumerizing]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/03/overconsumerizing/"/>
    <updated>2013-03-07T08:11:00+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/03/overconsumerizing</id>
    <content type="html"><![CDATA[<p>Microsoft has the tendency to overdo things. It happened before with .NET around the 2000s. They started to call all of their product ending with .NET. Do you remember Windows Server.NET or Windows CE.NET? Now, they are back with overdoing other stuff such as secrecy, not listening and neglectic developers with Windows Phone and Windows 8. <a href="http://hal2020.com">Hal</a> nails it again:</p>

<blockquote><p>Let me contrast three strategic thrusts going on at Microsoft.  Windows, Windows Phone, and Azure.  Windows and Windows Phone are in the “shut up and ship” camp.  Azure is in the ENGAGE camp.  It seems like every week Scott Guthrie is announcing new Azure technology previews or releases.  Everything about Azure is exciting.  Amazon, Salesforce, and a few others defined cloud computing.  Azure is displacing them.  It has the Big Mo.  Let me make this clear, AZURE IS GOING TO WIN the cloud computing infrastructure and platform battle.  Meanwhile Windows and Windows Phone continue to alienate their ecosystems.  It is unclear if Windows Phone will ever amount to a significant third ecosystem.  It is unclear that Windows will be able to halt an overall market share decline against IOS and Android tablets.  Azure developers are excited.  No, it’s beyond excitement.  Windows and Windows Phone developers?  Not so much.  They are, at best, conflicted.  Azure is doing platforms right.  Windows and Windows Phone?  They prefer to “shut up and ship”, even if it risks no one caring what they ship&#8230;.</p><footer><strong>hal2020</strong> <cite><a href='http://hal2020.com/2013/03/05/now-i-get-it-the-consumer-guys-at-microsoft-are-just-plain-wrong/'>Now I Get It, the Consumer Guys at Microsoft Are Just Plain Wrong!</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git and Visual Studio Are Awesome Together]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/03/git-and-visual-studio-are-awesome-together/"/>
    <updated>2013-03-01T19:59:00+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/03/git-and-visual-studio-are-awesome-together</id>
    <content type="html"><![CDATA[<p>I love Visual Studio and I love git too. What can be even better than this? Visual Studio 2012 integrated with Git. The two together are pure awesomeness and I fell in love with them.</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_001.png" title="Git SSCP" alt="Git Source Control Provider"></p>

<p>There is a provider that you can install in visual studio 2012 and you will get git integration. It can talk to tfs, if you use git there. IT can create local git repos and even can clone repositories from github or from other git hosting servers.</p>

<!--more-->


<p></p>

<p>To get the source control provider installed, you need to download and install the <a href="http://gitscc.codeplex.com/">Git Source Control Provider</a> package from codeplex. Once you are finished, launch Visual Studio and just open team explorer. You can connect to TFS hosted project or to local git repositories.</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_002.png" title="Git SSCP" alt="Git Source Control Provider"></p>

<h2>Getting familiar</h2>

<p>You can create a new repo by just providing the folder name.</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_003.png" title="Git New" alt="Creating a new Git repo"></p>

<p>Once you are done, navigate there using git bash and you will see that it is a proper git repo.</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_004.png" title="Git Bash" alt="New repository from git bash"></p>

<p>You can add existing local repos as well by providing the path</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_005.png" title="Existing Repos" alt="Adding existing git repositories"></p>

<p>Clone existing repos form github</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_006.png" title="Cloning Repos" alt="Cloning repos from github"></p>

<h2>Nice touches</h2>

<p>There are several things to like in the visual studio git integration. You can change your git settings from git explorer such as gitignore file, your email, the root folder for your repos, even it can get your images for you, to make the history to look nicer.</p>

<p>There is also a super nice and clean looking diff tool for you to go through the differences in commits.</p>

<p><img src="http://www.littlebigtomatoes.com/images/git_vs_007.png" title="Diff tool" alt="Nice and clear diff tool in IDE"></p>

<h2>The Bad</h2>

<p>The one thing I do not like is that there is no way to open the solution from the ide. You need to browse out the solution manually. Obviously, this does not happen when you clone from TFS. Little inconvenience, but still tolerable though.</p>

<p>Now go download it and use it. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the SelectedItems Property Binding for the Silverlight Listbox Control]]></title>
    <link href="http://www.littlebigtomatoes.com/2013/02/fixing-the-selecteditems-property-binding-for-the-silverlight-listbox-control/"/>
    <updated>2013-02-21T15:43:00+01:00</updated>
    <id>http://www.littlebigtomatoes.com/2013/02/fixing-the-selecteditems-property-binding-for-the-silverlight-listbox-control</id>
    <content type="html"><![CDATA[<p>I recently had to implement a feature in our silverlight app, where the user can remove multiple items selected in a listbox. The project uses the MVVM pattern, so all logic and state is handle in the ViewModel class. When trying to implement the multiple selection, I needed to add a property to my viewmodel that would be a reflection of the items selected on the view. It turns out the ListBox control does not support binding against the SelectedItems property for some reason.</p>

<p>This article describe, how the problem has been solved.</p>

<!--more-->


<p></p>

<h3>Solution:</h3>

<p>The full code for the classes is included at the end of the article.<br/>
The idea here is to able to create a two-way binding that would be able to represent the items selected in the listbox control. The definition for the property that holds the selected items on the viewmodel side would be defined like this:</p>

<figure class='code'><figcaption><span>property definition for the view model </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">_selectedItems</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">SelectedItems</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_selectedItems</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">set</span> <span class="p">{</span> <span class="n">_selectedItems</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(</span><span class="s">&quot;SelectedItems&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The expected behavior is that whenever the user selects one or more items in the listbox our SelectedItems property would be able to hold selections and notify all parties that are subscribed to the changes of our collections. This is why the ObservableCollection<T> type is picked for this property.</p>

<p>Next on the view side we would like to add a databinding that binds the listbox&rsquo;s selecteditems collection to our view-model SelectedItems property. As the listbox is not allowing to bind to this property, we need to have a new control called SmartListbox.</p>

<p>The binding expression is the most important one here. On the left hand side you can see the SmartSelectedItems property of the SmartListBox. On the right hand side of the binding expression there is the SelectedItems property of our viewmodel. For the rest of the article, I will refer these properties as left side and right side of the binding expression.</p>

<figure class='code'><figcaption><span>SmartListBox </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;my:SmartListBox</span> <span class="na">HorizontalAlignment=</span><span class="s">&quot;Stretch&quot;</span> <span class="na">x:Name=</span><span class="s">&quot;smartListBox&quot;</span>
</span><span class='line'>                 <span class="na">VerticalAlignment=</span><span class="s">&quot;Stretch&quot;</span> <span class="na">VerticalContentAlignment=</span><span class="s">&quot;Stretch&quot;</span> <span class="na">HorizontalContentAlignment=</span><span class="s">&quot;Stretch&quot;</span>
</span><span class='line'>                 <span class="na">ItemsSource=</span><span class="s">&quot;{Binding Items, Mode=TwoWay}&quot;</span> <span class="na">SmartSelectedItems=</span><span class="s">&quot;{Binding SelectedItems, Mode=TwoWay}&quot;</span>
</span><span class='line'>                 <span class="na">SelectionMode=</span><span class="s">&quot;Extended&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To be able to bind to a property in Xaml word the property needs to be defined as a DependencyProperty. This will be consisting a static and a non-static definition of the property. The static definition describes the property, so the runtime and editor tools will understand what the property type is, what the name of the property is and so on&hellip;</p>

<figure class='code'><figcaption><span>DependencyProperty definition </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">SmartSelectedItemsProperty</span> <span class="p">=</span>
</span><span class='line'>  <span class="n">DependencyProperty</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="s">&quot;SmartSelectedItems&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">INotifyCollectionChanged</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">SmartListBox</span><span class="p">),</span> <span class="k">new</span> <span class="n">PropertyMetadata</span><span class="p">(</span><span class="n">OnSmartSelectedItemsPropertyChanged</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">INotifyCollectionChanged</span> <span class="n">SmartSelectedItems</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">INotifyCollectionChanged</span><span class="p">)</span><span class="n">GetValue</span><span class="p">(</span><span class="n">SmartSelectedItemsProperty</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">set</span> <span class="p">{</span> <span class="n">SetValue</span><span class="p">(</span><span class="n">SmartSelectedItemsProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The general idea here is that we have two collections and we need to be able to detect and synchronize the changes between them, so we subscribe to the SmartListbox collection changes and we also subscribe to the changes of the collection that binds to our property.</p>

<p>In the constructor we simply just subscribe to the changes of our control</p>

<figure class='code'><figcaption><span>SmartListBox constructor </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="nf">SmartListBox</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">SelectionChanged</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">SelectionChangedEventHandler</span><span class="p">(</span><span class="n">BaseListBoxSelectionChanged</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the dependency property is defined we referenced a method called OnSmartSelectedItemsPropertyChanged. The purpose of the method is to handle the subscription to the dependency property. We would like to detect everything that happens to the right side collection in the binding, so we can support two way bindings as well.</p>

<p>You might notice the weirdness of the subscription here - the unsubscribe before subscribe - this is needed because if a view is visited more than binding is evaluated every time and we would end up subscribing to the collection more than once. This is unneeded, so the best is to make sure that we have one subscription only. Kudos for this tip to my colleague Mr. Rajnai for the tip.</p>

<figure class='code'><figcaption><span>Handling collection changes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">OnSmartSelectedItemsPropertyChanged</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">target</span><span class="p">,</span> <span class="n">DependencyPropertyChangedEventArgs</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">collection</span> <span class="p">=</span> <span class="n">args</span><span class="p">.</span><span class="n">NewValue</span> <span class="k">as</span> <span class="n">INotifyCollectionChanged</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">collection</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// unsubscribe, before subscribe to make sure not to have multiple subscription</span>
</span><span class='line'>    <span class="n">collection</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">-=</span> <span class="p">((</span><span class="n">SmartListBox</span><span class="p">)</span><span class="n">target</span><span class="p">).</span><span class="n">SmartSelectedItemsCollectionChanged</span><span class="p">;</span>
</span><span class='line'>    <span class="n">collection</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">+=</span> <span class="p">((</span><span class="n">SmartListBox</span><span class="p">)</span><span class="n">target</span><span class="p">).</span><span class="n">SmartSelectedItemsCollectionChanged</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The next method is handling the changes in the right hand side of the binding expression. The control unsubscribes from all collection notification, then transfers the selected items from the right hand side collection to the left hand side collection and then subscribes back to the events. The unsubscribe-subscribe is need this because there is no need to trigger any notifications to the collection that is being updated.</p>

<figure class='code'><figcaption><span>Handling selection changes </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">SmartSelectedItemsCollectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">NotifyCollectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Need to unsubscribe from the events so we don&#39;t override the transfer</span>
</span><span class='line'>  <span class="n">UnsubscribeFromEvents</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Move items from the selected items list to the list box selection</span>
</span><span class='line'>  <span class="n">Transfer</span><span class="p">(</span><span class="n">SmartSelectedItems</span> <span class="k">as</span> <span class="n">IList</span><span class="p">,</span> <span class="k">base</span><span class="p">.</span><span class="n">SelectedItems</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//subscribe to the events again so we know when changes are made</span>
</span><span class='line'>  <span class="n">SubscribeToEvents</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following method is responsible to handle the changes when the selected items in the listbox are changing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">BaseListBoxSelectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SelectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Need to unsubscribe from the events so we don&#39;t override the transfer</span>
</span><span class='line'>  <span class="n">UnsubscribeFromEvents</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Move items from the selected items list to the list box selection</span>
</span><span class='line'>  <span class="n">Transfer</span><span class="p">(</span><span class="k">base</span><span class="p">.</span><span class="n">SelectedItems</span><span class="p">,</span> <span class="n">SmartSelectedItems</span> <span class="k">as</span> <span class="n">IList</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//subscribe to the events again so we know when changes are made</span>
</span><span class='line'>  <span class="n">SubscribeToEvents</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is one possible risk with the implementation though. The dependency property is defined as INotifyCollectionChanged, but the code works with IList when doing the transfer. It is possible that the control binds against a property in the future that not implementing the IList. What will happen then?</p>

<p>Well, in the worst case when the Transfer method is called the conversion to IList results a null and the method simply returns resulting the binding to be not working. This is not ideal, but it solves the problem I faced.</p>

<p>Obviously, if this control would be sold to third parties the hidden requirement to also implement the IList for the viewmodel property needed to be addressed in some ways.</p>

<p><strong>Disclaimer:</strong> I do not work in vacuum nor inventing everything from scratch. I rely on google searching when coding and to find great solutions from fellow developers. For this particular problem, I found this great article and it served me as a starting point:</p>

<p><a href="http://blog.bdcsoft.com/developer-blog/2011/no-binding-for-you-a-listbox-selecteditems-behavior-solution/">No Binding for you a ListBox SelectedItems behavior solution</a></p>

<h3>Full code</h3>

<figure class='code'><figcaption><span>SmartListBox full class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">SmartListBox</span> <span class="p">:</span> <span class="n">ListBox</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="cp">#region Properties </span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">SmartSelectedItemsProperty</span> <span class="p">=</span>
</span><span class='line'>      <span class="n">DependencyProperty</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="s">&quot;SmartSelectedItems&quot;</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">INotifyCollectionChanged</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">SmartListBox</span><span class="p">),</span> <span class="k">new</span> <span class="n">PropertyMetadata</span><span class="p">(</span><span class="n">OnSmartSelectedItemsPropertyChanged</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">INotifyCollectionChanged</span> <span class="n">SmartSelectedItems</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">INotifyCollectionChanged</span><span class="p">)</span><span class="n">GetValue</span><span class="p">(</span><span class="n">SmartSelectedItemsProperty</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">SetValue</span><span class="p">(</span><span class="n">SmartSelectedItemsProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#endregion</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">SmartListBox</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">SelectionChanged</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">SelectionChangedEventHandler</span><span class="p">(</span><span class="n">BaseListBoxSelectionChanged</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">OnSmartSelectedItemsPropertyChanged</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">target</span><span class="p">,</span> <span class="n">DependencyPropertyChangedEventArgs</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">collection</span> <span class="p">=</span> <span class="n">args</span><span class="p">.</span><span class="n">NewValue</span> <span class="k">as</span> <span class="n">INotifyCollectionChanged</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">collection</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="c1">// unsubscribe, before subscribe to make sure not to have multiple subscription</span>
</span><span class='line'>        <span class="n">collection</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">-=</span> <span class="p">((</span><span class="n">SmartListBox</span><span class="p">)</span><span class="n">target</span><span class="p">).</span><span class="n">SmartSelectedItemsCollectionChanged</span><span class="p">;</span>
</span><span class='line'>        <span class="n">collection</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">+=</span> <span class="p">((</span><span class="n">SmartListBox</span><span class="p">)</span><span class="n">target</span><span class="p">).</span><span class="n">SmartSelectedItemsCollectionChanged</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">SmartSelectedItemsCollectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">NotifyCollectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Need to unsubscribe from the events so we don&#39;t override the transfer</span>
</span><span class='line'>      <span class="n">UnsubscribeFromEvents</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//Move items from the selected items list to the list box selection</span>
</span><span class='line'>      <span class="n">Transfer</span><span class="p">(</span><span class="n">SmartSelectedItems</span> <span class="k">as</span> <span class="n">IList</span><span class="p">,</span> <span class="k">base</span><span class="p">.</span><span class="n">SelectedItems</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//subscribe to the events again so we know when changes are made</span>
</span><span class='line'>      <span class="n">SubscribeToEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">void</span> <span class="nf">BaseListBoxSelectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SelectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Need to unsubscribe from the events so we don&#39;t override the transfer</span>
</span><span class='line'>      <span class="n">UnsubscribeFromEvents</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//Move items from the selected items list to the list box selection</span>
</span><span class='line'>      <span class="n">Transfer</span><span class="p">(</span><span class="k">base</span><span class="p">.</span><span class="n">SelectedItems</span><span class="p">,</span> <span class="n">SmartSelectedItems</span> <span class="k">as</span> <span class="n">IList</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//subscribe to the events again so we know when changes are made</span>
</span><span class='line'>      <span class="n">SubscribeToEvents</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">SubscribeToEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">SelectionChanged</span> <span class="p">+=</span> <span class="n">BaseListBoxSelectionChanged</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">SmartSelectedItems</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">SmartSelectedItems</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">+=</span> <span class="n">SmartSelectedItemsCollectionChanged</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Transfer</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">.</span><span class="n">IList</span> <span class="n">source</span><span class="p">,</span> <span class="n">IList</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">source</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">target</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">target</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">o</span> <span class="k">in</span> <span class="n">source</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">target</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">UnsubscribeFromEvents</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">SelectionChanged</span> <span class="p">-=</span> <span class="n">BaseListBoxSelectionChanged</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">SmartSelectedItems</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">SmartSelectedItems</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">-=</span> <span class="n">SmartSelectedItemsCollectionChanged</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ViewModel full class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">SmartListboxViewModel</span> <span class="p">:</span> <span class="n">ViewModelBase</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">SmartListboxViewModel</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">_selectedItems</span><span class="p">.</span><span class="n">CollectionChanged</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="n">SelectionCount</span> <span class="p">=</span> <span class="n">SelectedItems</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#region Properties</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">_items</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Items</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_items</span><span class="p">;</span>  <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">_items</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(</span><span class="s">&quot;Items&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">_selectedItems</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">SelectedItems</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_selectedItems</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">_selectedItems</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(</span><span class="s">&quot;SelectedItems&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">int</span> <span class="n">_selectionCount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">SelectionCount</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_selectionCount</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">_selectionCount</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">(</span><span class="s">&quot;SelectionCount&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cp">#endregion</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
